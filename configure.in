# Process this file with autoconf to produce a configure script.
# (package name, version, bug-report-address, tarball name)
#AC_INIT([NCO],[2.0.0],[help@nco.sourceforge.net],[nco.tar])
AC_INIT(src/nco/ncks.c)

# print GNU copyright in configure script
AC_COPYRIGHT

#safety check that the correct --srcdir was specified
AC_CONFIG_SRCDIR([src/nco/ncks.c])
# put helper scripts here to reduce clutter in the top level
AC_CONFIG_AUX_DIR(autobld)

# get build system parameters, need config.guess and config.sub to use these
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

# get version
if test -r doc/VERSION; then
  nco_version=`cat doc/VERSION`
#  AC_DEFINE_UNQUOTED(VERSION,$nco_version,NCO Version)
fi
# get hostname and user
if test "$USER"; then
  nco_user=$USER;
elif test "$LOGNAME"; then
  nco_user="$LOGNAME"; 
else 
  nco_user="nobody";
fi
AC_DEFINE_UNQUOTED(USER,$nco_user,User)
if test "$HOSTNAME"; then
  nco_hostname="$HOSTNAME"
elif test "$HOST"; then
  nco_hostname="$HOST"
else
  nco_hostname="nowhere";
fi
AC_DEFINE_UNQUOTED(HOST,$nco_hostname,Hostname)
AC_DEFINE_UNQUOTED(HOSTNAME,$nco_hostname,Hostname alias)
AC_DEFINE_UNQUOTED(GNU_TRP,$build,Autoconf-generated architecture \"triplet\")

# use automake to create Makefiles
#AM_INIT_AUTOMAKE
AM_INIT_AUTOMAKE(nco,"$nco_version")

# put all the preprocessor symbols in config.h
AM_CONFIG_HEADER(config.h)

## Checks for programs. CC has a preferred list
AC_PROG_CC(xlc acc cc gcc icc c89)
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_CXXCPP
AC_PROG_CC_STDC
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL

AM_CONDITIONAL(BUILD_NCAP,[test "$YACC" != "yacc" || test -e "src/nco/ncap_yacc.c"])

# disable maintainer-only options in generated Makefiles unless the flag
# --enable-maintainer-mode is given at configure time
AM_MAINTAINER_MODE

# Checks for library functions; DEFINE's put in config.h
AC_FUNC_MEMCMP
AC_FUNC_STAT
AC_FUNC_STRTOD
AC_CHECK_FUNCS([gethostname memchr memmove pow setlocale sqrt strcasecmp strchr strdup strrchr strstr strtol mkstemp])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([libintl.h limits.h locale.h netinet/in.h stdlib.h string.h unistd.h getopt.h netcdf.h])
AC_LANG_PUSH(C++)
AC_CHECK_HEADERS(cstdlib)
AC_LANG_POP(C++)

# Checks for typedefs, structures, and compiler characteristics.
# allow for wanton use of 'const' dispite the compiler
AC_C_CONST
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_TYPE_UID_T
AC_CHECK_TYPES([ptrdiff_t])
AC_CHECK_SIZEOF(int*)
AC_CXX_HAVE_VALARRAY

#############################################
# standard additions to compilers and preprocessors
# do this before testing anything
case $host in
  *-*-aix*)
    CFLAGS="$CFLAGS -qmaxmem=8192 -qlanglvl=extended"
#    CPPFLAGS="$CPPFLAGS -qlanglvl" 
    ;;
  rs6000-*-lynxos*)
    CFLAGS="$CFLAGS -ansi"
    ;;
  *-cygwin*)
    CFLAGS="$CFLAGS -ansi"
    ;;
esac
#############################################
# now we can do link test with libnetcdf.a
#
# make precious variables for ./configure --help
AC_ARG_VAR(NETCDF_LIB,location of netCDF library)
AC_ARG_VAR(NETCDF_INC,location of netCDF header files)
# add user-specified netCDF locations if specified
# otherwise add /usr/local/ locations if they exist
if test "$NETCDF_LIB"; then
  if test -d "$NETCDF_LIB"; then
    LDFLAGS="$LDFLAGS -L$NETCDF_LIB"
  else
    echo "*** NETCDF_LIB location \"$NETCDF_LIB\" does not exist. ***"
  fi
else
  if test -d "/usr/local/lib"; then
    LDFLAGS="-L/usr/local/lib $LDFLAGS"
  fi
fi
if test "$NETCDF_INC"; then
  if test -d "$NETCDF_INC"; then
    CPPFLAGS="$CPPFLAGS -I$NETCDF_INC"
  else
    echo "*** NETCDF_INC location \"$NETCDF_INC\" does not exist. ***"
  fi
else
  if test -d "/usr/local/include"; then
    CPPFLAGS="-I/usr/local/include $CPPFLAGS"
  fi
fi
# NCO does not support netCDF2
AC_DEFINE(NO_NETCDF_2,1,No netCDF version 2)
# First check for 'nc_open' using default compiler flags.  If it fails, add
# 64-bit flags if we know them and check for 'ncclose' (nc_open is cached, 
# so checking for it again will not work)
AC_MSG_NOTICE([checking default compiler flags])
AC_CHECK_LIB([netcdf], [nc_open],[
LIBS="-lnetcdf $LIBS"
AC_MSG_NOTICE([libnetcdf links with default compiler flags]) ],[
# linking failed, so add 64-bit compiler flags and try again
AC_MSG_NOTICE([initial linking failed.  Adding 64-bit flags (if known)])
case $host in
# fxm csz: Test for existence of user-defined vars before overwriting
  *-*-aix*)  CFLAGS="$CFLAGS -q64"
             LDFLAGS="$LDFLAGS -q64"
# csz: Pass -X 64 to symbol extractor or libtool will fail
             AR="ar -X 64"
             NM="nm -B -X 64"
	     ;;
  *-*-irix*) case $CC in
               gcc) CFLAGS="$CFLAGS -mabi=64"
		    LDFLAGS="$LDFLAGS -mips4 -L/usr/local/lib/mabi=64" ;;
               cc)  CFLAGS="$CFLAGS -64 -mips4" 
		    LDFLAGS="$LDFLAGS -64" ;;
             esac
             ;;
  sparc-*-*) CFLAGS="$CFLAGS -xarch=v9"
             LDFLAGS="$LDFLAGS -xarch=v9"
             ;;
esac	     

AC_CHECK_LIB([netcdf], [nc_close], AC_MSG_NOTICE([adding 64-bit compiler flags]),[
echo "*********************"
echo "I cannot link with \"libnetcdf.a\" when LDFLAGS=$LDFLAGS. "
echo "Maybe adjust LDFLAGS, or perhaps you do not have libnetcdf, in"
echo "which case it can be retrieved from http://www.unidata.ucar.edu."
echo "Otherwise, I found that CC=\"$CC\" and CFLAGS=\"$CFLAGS\" still "
echo "fails.  You can override my choices by explicitly setting these as "
echo "environment variables and then using ./configure again."
echo "*********************"
AC_MSG_ERROR([all netCDF linking failed.]) ] ) ]
)
#############################################
  
# Checks for libraries,they are added to the link path if found
AC_CHECK_LIB([C], [cosf])
AC_CHECK_LIB([m], [sin])
AC_CHECK_LIB([sunmath], [sinf])
AC_CHECK_FUNCS([getopt getopt_long])
AC_CHECK_FUNC(getopt_long, , [nco_need_getopt_long="yes"] )
AM_CONDITIONAL(NCO_NEED_GETOPT_LONG, test "$nco_need_getopt_long" = "yes")
# NCO_CHECK_FUNC also defines NEED_xxxx when xxxx function is not found
NCO_CHECK_FUNCS([fmodf powf acosf asinf atanf cosf expf log10f logf sinf sqrtf tanf])
NCO_CHECK_FUNCS([erff erfcf gammaf])
NCO_CHECK_FUNCS([acoshf asinhf atanhf coshf sinhf tanhf])
NCO_CHECK_FUNCS([ceilf floorf])
NCO_CHECK_FUNCS([nearbyintf rintf roundf truncf])
NCO_CHECK_FUNCS([getopt_long])
AC_CHECK_LIB([intl], [gettext])
AC_CHECK_LIB([resolv], [res_init])
AC_CHECK_LIB([socket], [main])> 
AC_CHECK_LIB([thread], [main])
#AC_CHECK_LIB([nsl], [main])
AC_CHECK_LIB([nco], [nco_open])
#############################################

# check for unidata's UDUNITS library and data files
if test "x$NETCDF_INC" = "x"; then
  nco_udunits_dat="/usr/local/etc/udunits.dat"
else
  nco_udunits_dat="$NETCDF_INC/../etc/udunits.dat"
fi
AC_CHECK_LIB([udunits], [utInit])
dnl this must be DEFINE_UNQUOTED and then a quoted string so the quotes get
dnl substituted into the source file correctly
AC_CHECK_FILE([$nco_udunits_dat],[AC_DEFINE_UNQUOTED([UDUNITS_DAT],["$nco_udunits_dat"],[location of udunits data file])])
AC_CHECK_HEADERS([udunits.h])

#############################################
# HDF5 support
AC_ARG_VAR([HDF5_ROOT],location of HDF5 libraries)
AC_ARG_ENABLE(hdf5,AC_HELP_STRING([--enable-hdf5],[use hdf5 support (default is NO)]),enable_hdf5=$enableval, enable_hdf5=no)

# check for HDF5 libraries unless told not to
if test "$enable_hdf5" != "no"; then
  #add $HDF5_ROOT to search path if present
  if test "$HDF5_ROOT"; then
    LDFLAGS="$LDFLAGS -L$HDF5_ROOT"
  fi 
  # these must all be present for HDF5 to work.  If all present, enable_hdf5=yes
   AC_CHECK_LIB([mfhdf],[main],nco_have_mfhdf=yes,enable_hdf5=no)
#  AC_CHECK_LIB([df],[main],,enable_hdf5=no)
#  AC_CHECK_LIB([jpeg],[main],,enable_hdf5=no)
#  AC_CHECK_LIB([z],[main],,enable_hdf5=no)
  AC_CHECK_LIB([hdf5], [H5Fcreate],nco_have_hdf5=yes,enable_hdf5=no)
#  AC_CHECK_LIB([f],[main],,enable_hdf5=no)
#  AC_CHECK_LIB([ftn],[main],,enable_hdf5=no)

  if test "$enable_hdf5" = "no"; then
    AC_MSG_WARN([HDF5 support disabled (missing libraries)])
  elif test "$enable_hdf5" = "yes"; then
     AC_DEFINE(HDF5, 1, have HDF5 support)
     AC_MSG_NOTICE([HDF5 support enabled ** EXPERIMENTAL **])
     LIBS="-lmfhdf -lhdf5 $LIBS"
dnl  add AC_DEFINE()'s here if you want individual HAVE_LIBxxx in config.h
dnl  they were not included by default
  fi
fi
#############################################
# DODS support
AC_ARG_VAR([DODS_ROOT],[root of DODS stuff])
AC_ARG_ENABLE(dods,AC_HELP_STRING([--enable-dods],[use DODS (default is YES)]),enable_dods=$enableval, enable_dods=yes)

# check for DODS libraries unless told not to
if test "$enable_dods" != "no"; then
  #add $DODS_ROOT to search path if present
  if test "$DODS_ROOT"; then
    LDFLAGS="$LDFLAGS -L$DODS_ROOT/lib"
  fi 
  # these must all be present for DODS to work.  If all present, enable_dods=yes
  # nc-dods requires dap++ to link with success
  nco_old_LIBS="$LIBS"
  AC_CHECK_LIB([stdc++], [cerr],,enable_dods=no)
  AC_CHECK_LIB([z], [inflate],,enable_dods=no)
  AC_CHECK_LIB([www], [HTLibInit],,enable_dods=no)
  AC_CHECK_LIB([rx], [main],,enable_dods=no)
dnl add these libs now to resolve interdependency when -lnc-dods is checked
  LIBS="-ldap++ -lnc-dods -ldap++ $LIBS"
  AC_CHECK_LIB([nc-dods],[nc_open],,enable_dods=no)

  if test "$enable_dods" = "no"; then
    AC_MSG_WARN([DODS support disabled (missing libraries)])
    LIBS="$nco_old_LIBS"
  elif test "$enable_dods" = "yes"; then
    AC_DEFINE(ENABLE_DODS, 1, have DODS support)
    AC_MSG_NOTICE([DODS support enabled])
    LIBS="-lnc-dods -ldap++ -lnc-dods -ldap++ -lrx -lwww -lz -lstdc++ $nco_old_LIBS"
    LIBTOOL="$LIBTOOL --preserve-dup-deps"
  fi
fi
AM_CONDITIONAL(TEST_DODS,[test "$enable_dods" = "yes"])

#############################################
# if --enable-fortran define USE_FORTRAN_ARITHMATIC
# is this really even used anymore?
AC_ARG_ENABLE(fortran,AC_HELP_STRING([--enable-fortran],[use fortran arithmetic (default is NO)]), enable_fortran=$enableval, enable_fortran=no)

if test "$enable_fortran" = "yes"; then
  AC_DEFINE(USE_FORTRAN_ARITHMATIC,1,use fortran arithmatic)
fi

#############################################
# if --enable-debug, add these compiler flags
AC_ARG_ENABLE(debug,AC_HELP_STRING([--enable-debug],[more debugging info (default is NO)]),enable_debug=$enableval, enable_debug=no)

if test "$enable_debug" = "yes"; then
  case $host in
    *-*-aix*)
      CFLAGS="$CFLAGS -g" 
      ;;
    alpha*-*-*) 
      CFLAGS="$CFLAGS -g -check_bounds -check -check_omp"
      ;;
    *-cray-unicos) 
      CFLAGS="$CFLAGS -g -h indef -h rounddiv -h nofastmd -h nofastmodulus"
      ;;
    i[3456]86-*-linux-*)
      CFLAGS="$DFLAGS -g Wall"
      ;;
    *-nec-*)
      CFLAGS="$CFLAGS -g"
      ;;
    rs6000-*-lynxos*)
      CFLAGS="$CFLAGS -g"
      ;; 
    mips*-sgi-irix*)
      CFLAGS="$CFLAGS -g"
      ;;
    sparc-*-*)
      CFLAGS="$CFLAGS -g"
      ;;
    *-cygwin*)
      CFLAGS="$CFLAGS -g"
      ;;
  esac
fi

#############################################
# if --enable-extreme, add these compiler flags
AC_ARG_ENABLE(extreme,AC_HELP_STRING([--enable-extreme],[extreme debugging (default is NO)]),enable_extreme=$enableval, enable_extreme=no)

if test "$enable_extreme" = "yes"; then
  case $host in
    *-*-aix*)
      CFLAGS="$CFLAGS -g -qflttrap -qidirfirst -qlonglong -qwarn64 -qcheck=all -qhalt=s" 
      ;;
    alpha*-*-*)
      CFLAGS="$CFLAGS -N 132" 
      ;;
    *-cray-unicos) 
      CFLAGS="$CFLAGS -g -h rounddiv -h indef -h bounds -h nofastmd -h nofastmodulus"
      ;;
    i[3456]86-*-linux-*)
      CFLAGS="$CFLAGS -g -Wall"
      ;;
    *-nec-*)
      CFLAGS="$CFLAGS -h0 -g  -hstack=nan"
      ;;
    rs6000-*-lynxos*)
      CFLAGS="$CFLAGS -g"
      ;; 
    mips*-sgi-irix*)
      CFLAGS="$CFLAGS -g"
      ;;
    sparc-*-*)
      CFLAGS="$CFLAGS -g"
      ;;
  *-cygwin*)
      CFLAGS="$CFLAGS -g"
      ;;
  esac

# now check for some debugging libraries
  AC_CHECK_LIB([ccmalloc],[main],,AC_MSG_WARN([cannot find ccmalloc library]) )
  AC_CHECK_LIB([dl],[main],,AC_MSG_WARN([cannot find dl library]) )  
  
fi

#############################################
# if --enable-optimize, add these compiler flags
AC_ARG_ENABLE(optimize,AC_HELP_STRING([--enable-optimize],[optimize (default is NO)]),enable_optimize=$enableval, enable_optimize=no)

if test "$enable_optimize" = "yes"; then
  case $host in
    *-*-aix*)
      CFLAGS="$CFLAGS -O"
      ;;
    alpha*-*-*)
      CFLAGS="$CFLAGS -O2 -ansi-alias"
      ;;
    i[3456]86-*-linux-*)
      CFLAGS="$CFLAGS -O2"
      ;;
    *-nec-*)
      CFLAGS="$CFLAGS  -h2 -hmath vector -hxint"
      ;;   
    rs6000-*-lynxos*)
      CFLAGS="$CFLAGS -O"
      ;; 
    mips*-sgi-irix*)
      CFLAGS="$CFLAGS -O2"
      ;;
    sparc-*-*)
      CFLAGS="$CFLAGS -O2"
      ;;
  *-cygwin*)
      CFLAGS="$CFLAGS -O"
      ;;
  esac

fi

#############################################
# if --enable-nco_cplusplus, compile the c++ library
AC_ARG_ENABLE(nco_cplusplus,AC_HELP_STRING([--enable-nco_cplusplus],[build the c++ library (default is YES)]),enable_nco_cxx=$enableval,enable_nco_cxx=yes)

#############################################
# make defines that are currently used in nco programs based on $host_os
case $host in
  *-*-aix*)
    AC_DEFINE(AIX,1,IBM AIX OS)
    ;;
  i[3456]86-*-freebsd*)
    AC_DEFINE(FREEBSD,1,FreeBSD OS)
    ;;   
  alpha*-*-linux*)
    AC_DEFINE(LINUXALPHA,1,Linux OS)
    ;;   
  i[3456]86-*-linux*)
    AC_DEFINE(LINUX,1,Linux OS)
    ;;
  powerpc-*-linux*)
    AC_DEFINE(LINUXPPC,1,Linux OS)
    ;;
  sparc64-*-linux*)
    AC_DEFINE(LINUXSPARC64,1,Linux OS)
    ;;
  rs6000-*-lynxos*)
    ;;
  *-*-darwin*)
    AC_DEFINE(MACOSX,1,Apple OS X)
    ;;
  *-nec-*)
    AC_DEFINE(NECSX,1,NEC SuperX OS)
    ;;   
  mips*-sgi-irix*)
    AC_DEFINE(SGIMP64,1,IRIX OS)
    ;;
  sparc-*-*)
    AC_DEFINE(SUNMP,1,Solaris 2.* OS)
    ;;  
  *-*-cygwin*)
    AC_DEFINE(WIN32,1,Windows OS)
    ;;
esac

#############################################
# create netCDF files for checking
AC_PATH_PROG(path_to_ncgen,ncgen,,)
if test  "$path_to_ncgen"; then
  AC_MSG_NOTICE(creating netCDF data files)
  $path_to_ncgen -b -o data/in.nc data/in.cdl
  for fl in 85.nc 86.nc 87.nc 88.nc 89.nc h0001.nc h0002.nc h0003.nc; do
    if (test -e data/$fl); then
      printf ""
    else
      $LN_S in.nc data/$fl;
    fi
  done
  if (test -e src/nco_c++/in.nc); then
    printf ""
  else
    $LN_S ../../data/in.nc src/nco_c++/in.nc
  fi
else
  echo "** I could not find 'ncgen' in your path, so the netCDF data files"
  echo "** were not created. This will need to be done manually in the data/"
  echo "** directory before running \"make check\" "
fi
#############################################

AC_CONFIG_FILES([Makefile src/Makefile src/nco/Makefile  man/Makefile doc/Makefile])
if  test "$ac_cv_cxx_have_valarray" = "yes" \
 && test "$enable_nco_cxx" = "yes" ; then
  AC_CONFIG_FILES(src/nco_c++/Makefile)
  NCO_CXX="nco_c++"
else
  NCO_CXX=
fi
AC_SUBST(NCO_CXX)
AC_OUTPUT
#############################################
# echo build parameters for debugging
echo "----- Configuration Parameters -----"
echo "	host	=	$host "
echo "	CC 	= 	$CC "
echo "	CFLAGS	=	$CFLAGS "
echo "	CXX	=	$CXX "
echo "	CXXFLAGS=	$CXXFLAGS "
echo "	CPP	=	$CPP "
echo "	CPPFLAGS=	$CPPFLAGS "
echo "	LDFLAGS = 	$LDFLAGS "
echo "	AR_FLAGS=	$AR_FLAGS "
