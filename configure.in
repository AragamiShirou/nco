# $Header: /data/zender/nco_20150216/nco/configure.in,v 1.158 2006-01-31 06:28:00 zender Exp $ -*-Shell-script-*-

# Purpose: Template used by autoconf to generate NCO ./configure script
# More recent software calls this file configure.ac, older software calls it configure.in

# Copyright (C) 2003--2005 Charlie Zender and Rorik Peterson
# This software may be modified and/or re-distributed under the terms of the GNU General Public License (GPL) Version 2
# See http://www.gnu.ai.mit.edu/copyleft/gpl.html for full license text

# TODO: need support for:
#   MacOSX - detect the OS, compilers, etc.
#   MPI - detect mpicc, need to detect whether LAM or MPICH2
#   OpenMP - detect OMP-capable compiler (xlr_c/AIX, icc/Linux, pgcc/Linux; NOT gcc)
#   HDF5, NetCDF4 - detect hdf5, hdf5_hl, netcdf libs !! done

# Usage:
# autoconf
# cd ~/nco;aclocal;autoheader;automake --foreign;autoconf
# cd ~/nco;make distclean;aclocal;autoheader;automake --foreign;autoconf;configure;make install

# NB: Different versions of the GNU toolchain produce different (but equivalent)
# configure scripts from the same autotools inputs.
# To keep proliferation of different but equivalent versions of automatically
# generated scripts (e.g., configure, Makefile.in) from cluttering repository,
# please try to generate scripts only from current autotools distributions
# on machines running an up-to-date version of Debian Linux, preferably Sid.

# GNU autotools rely on ~/nco/autobld/config.[guess,sub]
# Auto-configuration fails if these routines cannot detect your machine type
# This happens periodically as newer machines are introduced
# Notify the NCO project if configuration fails in either file
# and we will update the config files from the upstream source,
# ftp://ftp.gnu.org/pub/gnu/config/config.[guess,sub]

# Process file with autoconf to produce configure script
# (package name,version,bug-report-address,tarball name)
AC_INIT([NCO netCDF Operators],[3.1.1],[help@nco.sf.net],[nco])

# Print GNU copyright in configure script
AC_COPYRIGHT

# Safety check that correct --srcdir was specified
AC_CONFIG_SRCDIR([src/nco/ncks.c])
# Put helper scripts here to reduce top level clutter
AC_CONFIG_AUX_DIR(autobld)

# Get build system parameters, need config.guess and config.sub to use these
AC_CANONICAL_BUILD
# sets $build
AC_CANONICAL_HOST
# sets $host - important var
AC_CANONICAL_TARGET
#sets $target - ignore for the most part

# Get version
if test -r doc/VERSION; then
    nco_version=`cat doc/VERSION`
#  AC_DEFINE_UNQUOTED(VERSION,${nco_version},NCO Version)
fi

#set egrep
AC_PROG_EGREP

# Get hostname and user
if test "${USER}"; then
    nco_user=${USER};
elif test "${LOGNAME}"; then
    nco_user="${LOGNAME}";
else
    nco_user="nobody";
fi
AC_DEFINE_UNQUOTED(USER,${nco_user},User)
if test "${HOSTNAME}"; then
    nco_hostname="${HOSTNAME}"
# following line $HOST will not be set (from AC_CANONICAL_HOST - will set $host
elif test "${HOST}"; then
    nco_hostname="${HOST}"
else
    nco_hostname="nowhere";
fi

AC_DEFINE_UNQUOTED(HOST,${nco_hostname},Hostname)
AC_DEFINE_UNQUOTED(HOSTNAME,${nco_hostname},Hostname alias)
AC_DEFINE_UNQUOTED(GNU_TRP,${build},Autoconf-generated architecture \"triplet\")

# Use automake to create Makefiles
#AM_INIT_AUTOMAKE
AM_INIT_AUTOMAKE(nco,"${nco_version}")

# Put preprocessor symbols in config.h
AM_CONFIG_HEADER(config.h)

# Check for build chain
# CC and CXX have preferred lists
# AC_PROG_CC sets GCC to 'yes' when GCC is detected
# AC_PROG_CC sets CFLAGS = -g [-O2 iff GCC]
AC_PROG_CC( xlc_r xlc acc cc gcc gcc-2 icc como c89)
AC_PROG_CXX(xlC_r xlC aCC CC cxx g++ g++-2 c++ icc como)
AC_PROG_CPP
AC_PROG_CXXCPP
AC_PROG_CC_STDC
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL

# until a fix for the libtool error is found.
LIBTOOL="${LIBTOOL} --tag=CXX"
#LIBTOOL="${LIBTOOL} --tag=ignore_tag_err"

AM_CONDITIONAL(BUILD_YACC_SOURCE,[test "${YACC}" != "yacc" || test -f "src/nco/ncap_yacc.c"])

# Disable maintainer-only options in generated Makefiles unless flag
# --enable-maintainer-mode is given at configure time
AM_MAINTAINER_MODE

# Check for specific library functions and take corrective action when buggy versions found
AC_FUNC_MEMCMP
AC_FUNC_STAT
AC_FUNC_STRTOD

# Check for library functions, if found then #define HAVE_FUNCTION in config.h
AC_CHECK_FUNCS([floor canonicalize_file_name gethostname memchr memmove memset mkstemp pow readlink realpath regcomp setlocale sqrt strchr strerror strpbrk strrchr strstr strtol])

# Check for header files
AC_HEADER_STDC
AC_CHECK_HEADERS([getopt.h libintl.h limits.h locale.h netinet/in.h stdlib.h string.h unistd.h])
AC_LANG_PUSH(C++)
AC_CHECK_HEADERS(cstdlib)
AC_LANG_POP(C++)

# Check for typedefs, structures, and compiler characteristics
# Allow wanton use of 'const' despite compiler
AC_C_CONST
# Allow inline, use __inline__ or __inline, or remove inline as appropriate
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_TYPE_UID_T
AC_CHECK_TYPES([ptrdiff_t])
AC_CHECK_SIZEOF(int*)
AC_CXX_HAVE_VALARRAY
# Arrange for large file support (LFS)
AC_SYS_LARGEFILE

echo ""
echo "########################################"
echo "#  Testing for DAP (aka DODS) support  #"
echo "########################################"
echo ""
# Begin DAP (aka DODS) support
# Store pre-DAP LIBS value to restore from later
nco_LIBS_no_DAP="${LIBS}"
# Find OPeNDAP netcdf library before real netCDF library. jhrg 05/26/05

# DAP_ROOT is value of "${prefix}" set when building/installing OPeNDAP code
# Scripts dap-config and ncdap-config are in ${prefix}/bin
# Use them to find how to link for this particular build. jhrg 5/25/05

# libnc-dap 3.5.1 uses netcdf 3.5; use Charlie's hack of supplying
# definition for NC_64BIT_OFFSET here. This should be fixed in nc-dap 3.6.
# Sorry about version numbers being confusing... jhrg 6/3/05

# fxm: is DAP_ROOT (or DODS_ROOT) an obselete variable in DAP 3.5+?
# hjm thinks so.  Eliminate these 3 lines after running the dap tests with it disabled.
#  AC_ARG_VAR([DAP_ROOT],[Root of DAP installation] (compile-time))
AC_ARG_ENABLE(dap,AS_HELP_STRING([--enable-dap],[Build OPeNDAP/DODS-enabled clients (conflicts with netcdf4)  [[default=yes]]]),enable_dap=${enableval},enable_dap=yes)


AC_ARG_ENABLE(netcdf4,AS_HELP_STRING([--enable-netcdf4],[Use netcdf versiion 4 (WARNING: Experimental) [[default=no]]]),enable_netcdf4=yes,enable_netcdf4=no)

# Check to see if netcdf4 is requested
echo "DEBUG: enable_netcdf4: ${enable_netcdf4} & enable_dap: ${enable_dap}"
if (test "${enable_netcdf4}" != 'no' && test "${enable_dap}" != 'no'); then
	# override the netcdf4 request
	echo ""
	echo "WARNING: Requested both netcdf4 and DAP support - overriding netcdf4"
	echo "NCOs will be built with DAP support but NOT netcdf4/hdf5 support"
	echo ""
	enable_netcdf4='no'
fi

# Check for DAP libraries unless told not to
if test "${enable_dap}" != 'no'; then
	if which ncdap-config > /dev/null; then
		CPPFLAGS="${CPPFLAGS} `ncdap-config --cflags`"
		nc_dap_ver=`ncdap-config --version`
		nc_dap_ver_M=`echo $nc_dap_ver | sed 's@^libnc-dap \([[0-9]]\)*\.\([[0-9]]*\)\.\([[0-9]]*\)$@\1@'`
		nc_dap_ver_m=`echo $nc_dap_ver | sed 's@^libnc-dap \([[0-9]]\)*\.\([[0-9]]*\)\.\([[0-9]]*\)$@\2@'`
		if test $nc_dap_ver_M -le 3 -a $nc_dap_ver_m -le 5; then
	 	   CPPFLAGS="${CPPFLAGS} -DNC_64BIT_OFFSET"
		fi
		LIBS="`ncdap-config --libs` ${LIBS}"
	fi

    AC_LANG_PUSH([C++])
    AC_CHECK_LIB([nc-dap],[nc_open],,enable_dap=no)
    AC_LANG_POP

    LIBS="${LIBS} -lstdc++"

	if test "${enable_dap}" = 'no'; then
		AC_MSG_WARN([DAP support disabled (missing libraries)])
		LIBS="${nco_LIBS_no_DAP}"
	elif test "${enable_dap}" = 'yes'; then
		AC_DEFINE([ENABLE_DAP],[1],[Compile operators with OPeNDAP/DODS support])
		AC_MSG_NOTICE([DAP support enabled])
		# libtool cleans up duplicate library links (e.g., dap++, nc-dap) unless told not to
		# New (3.5.0+) version of libnc-dap does not require duplicate libraries jhrg 6/3/05
		LIBTOOL="${LIBTOOL} --tag=CXX --preserve-dup-deps"
	fi
fi
AM_CONDITIONAL(TEST_DAP,[test "${enable_dap}" = 'yes'])
# End DAP support


# Begin Mandatory Link Test with libnetcdf.a
# Make precious variables for ./configure --help
AC_ARG_VAR(NETCDF_INC,Location of netCDF headers (compile-time))
AC_ARG_VAR(NETCDF_LIB,Location of netCDF library (compile-time))

# if don't want netcdf4 capabilities, but are using the netcdf4 lib, need to
# link with hdf5 libs to enable the link - ie as if you wanted netcdf4
#following line enables & initializes the configure option


echo ""
echo "################################################"
echo "# Testing whether libnetcdf is version 4 or 3  #"
echo "################################################"
echo ""
echo "DEBUG: enable_netcdf4: ${enable_netcdf4} & enable_dap: ${enable_dap}"

AC_ARG_VAR([NETCDF4_ROOT],[Root of NETCDF4 installation - must be separate from netcdf3.x] (compile-time))
# test if he set NETCDF4_ROOT and it at least exists
if ( test "${enable_netcdf4}" = 'yes'); then
	if (test "${NETCDF4_ROOT}" != ""); then
		if (test -d "${NETCDF4_ROOT}"); then
			echo "NETCDF4_ROOT is set and exists - assuming it's real";\
			CPPFLAGS="-I${NETCDF4_ROOT}/include $CPPFLAGS";\
			LDFLAGS="-L${NETCDF4_ROOT}/lib $LDFLAGS";
			if (test "${enable_netcdf4}" != 'yes' || test "${enable_dap}" = 'no'); then
				# check libnetcdf for netcdf4 function to test which one it is..
				# and netcdf4 (at alpha10) conflicts with shared libs - fxm - check after final release.
				enable_shared='no'
				AC_CHECK_LIB([netcdf],[nc_check_for_hdf5],[LIBS="-lnetcdf -lhdf5 -lhdf5_hl ${LIBS}" AC_DEFINE(ENABLE_NETCDF4,1,Have included NETCDF4 support)],[enable_netcdf4=no],[-lhdf5 -lhdf5_hl])
				#X#CPPFLAGS="${CPPFLAGS} -DNC_64BIT_OFFSET"
			fi
		else
			echo "NETCDF4_ROOT set but doesn't exist - skipping netcdf4 config";\
			enable_netcdf4='no'
		fi
	else
		echo "You set '--enable-netcdf4' but did not set NETCDF4_ROOT";\
		echo "you need to set both to enable NETCDF4.  I'll try it anyway...";\
		AC_CHECK_LIB([netcdf4],[nc_check_for_hdf5],,enable_netcdf4=no,[-lhdf5 -lhdf5_hl])
	fi
fi
echo "DEBUG: LIBS = ${LIBS}"


# Begin HDF5 test
# note that netcdf4 requires the libhdf5 & libhdf5_hl to link correctly

if test "${enable_dap}" = 'no'; then
    AC_MSG_WARN([Did not request OpenDAP; checking for version of libnetcdf to use])
fi

echo ""
echo "#############################################"
echo "# Testing for HDF5 & HDF5_HL & NETCDF4 libs #"
echo "#############################################"
echo ""
echo "DEBUG: LIBS = ${LIBS}"

# Check for HDF5 libraries unless told otherwise.  HDF5 libs can be in standard places
# but netcdf4 HAVE to be isolated in NETCDF4_ROOT to avoid conflicting with libnetcdf (3.x)
# this may be redundant if the previous netcdf4 AC_CHECK_LIB succeeded tho...?
if (test "${enable_netcdf4}" = 'yes' && test "${enable_dap}" = 'no'); then
	# assume HDF5 libs are in std places but allow builder to specify another
	AC_ARG_VAR([HDF5_LIB_DIR],Location of HDF5 libraries (compile-time))
	# Add ${HDF5_LIB_DIR} to search path if present
	if test "${HDF5_LIB_DIR}"; then
		LDFLAGS="-L${HDF5_LIB_DIR} ${LDFLAGS} "
	fi

	# if using NETCDF4, require HDF5 libs to be known to system before the nc_open test
	# so check for the HDF5 libs
	AC_CHECK_LIB([hdf5],[H5Fcreate],[nco_have_hdf5='yes'],enable_netcdf4='no')
	if test "${nco_have_hdf5}" = 'yes'; then
		# include HDF5 libs in LIBS line
		LIBS="-lhdf5  ${LIBS}"
	fi
	AC_CHECK_LIB([hdf5_hl],[H5LTcreate_compound_type],nco_have_hdf5_hl=yes,enable_netcdf4=no)
	if test "${nco_have_hdf5}" != 'yes'; then
		AC_MSG_WARN([NETCDF4 support disabled (missing HDF5 libraries)])
	elif test "${nco_have_hdf5_hl}" = 'yes'; then
		# include HDF5_hl libs in LIBS line
		LIBS="-lhdf5_hl ${LIBS}"
		AC_DEFINE(ENABLE_NETCDF4,1,Have included NETCDF4 support)
	fi  # End test for HDF5 libs

elif (test "${enable_netcdf4}" = 'no' && test "${enable_dap}" = 'no'); then
	# this next stanza should only be tried if --enable-netcdf4=no / --disable-netcdf4
	# && look for real netCDF library only if enable_dap is false. jhrg 05/26/05
	# HOWEVER: if have installed libnetcdf4 instead of libnetcdf3x, have to also link in
	# the hdf5 libs to get it to compile correctly, just as above.
	# Add user-specified netCDF locations, if any, else add /usr/local locations if they exist
	if test "${NETCDF_LIB}"; then
		if test -d "${NETCDF_LIB}"; then
			LDFLAGS="-L${NETCDF_LIB} ${LDFLAGS} "
		else
			echo "WARNING: NETCDF_LIB location \"${NETCDF_LIB}\" does not exist!"
		fi
	else
		if test -d "/usr/local/lib"; then
			LDFLAGS="-L/usr/local/lib ${LDFLAGS}"
		fi
	fi # !NETCDF_LIB
	if test "${NETCDF_INC}"; then
		if test -d "${NETCDF_INC}"; then
			CPPFLAGS="-I${NETCDF_INC} ${CPPFLAGS} "
		else
			echo "WARNING: NETCDF_INC location \"${NETCDF_INC}\" does not exist!"
		fi
	else
		if test -d "/usr/local/include"; then
			CPPFLAGS="-I/usr/local/include ${CPPFLAGS}"
		fi
	fi # !NETCDF_INC
fi # enable_dap


# at this point we either want NC4 and have HDF5 or have used DAP's libnetcdf
# or don't have HDF5 and don't want NC4 (aka just want NC3.x)
AC_CHECK_HEADERS([netcdf.h])
# NCO does not support netCDF2
AC_DEFINE(NO_NETCDF_2,1,No netCDF version 2.x API)

if (test "$enable_dap" = 'no' && test "${enable_netcdf4}" = 'no'); then

# Check for 'nc_open()' using default compiler flags
# If this fails, check for 'nc_close()' with 64-bit ABI flags (if known)
# [nc_open() is cached---checking for it twice does not work]
AC_MSG_NOTICE([Checking default compiler flags])
AC_CHECK_LIB([netcdf],[nc_open],[
	LIBS="-lnetcdf ${LIBS}"
	AC_MSG_NOTICE([Good news: Simple program compiles and links to libnetcdf.a with default compiler flags])
    if (test "${have_hdf5}" = 'yes' && test "${have_hdf5_ul}" = 'yes') ; then
        echo "Great!  This build can support some NETCDF4 features."
    fi
    ],[
# Linking failed, so add 64-bit compiler flags and try again
	AC_MSG_NOTICE([Bad news: Simple program does not compile and link to libnetcdf.a with default compiler flags. Will try with 64-bit ABI flags...])

	case ${host} in
# fxm csz: Test for existance of user-defined vars before overwriting
	    mips*-sgi-irix* )

		case ${CC} in
		    cc ) CFLAGS="${CFLAGS} -64 -mips4" ; LDFLAGS="${LDFLAGS} -64" ; ;;
		    gcc ) CFLAGS="${CFLAGS} -mabi=64" ; LDFLAGS="${LDFLAGS} -mips4 -L/usr/local/lib/mabi=64" ; ;;
		esac
		;;
	    powerpc-ibm-aix* )
		case ${CC} in
# Pass -X 64 to symbol extractor or libtool fails
		    gcc ) CFLAGS="${CFLAGS} -maix64" ; ;;
		    xlc* ) CFLAGS="${CFLAGS} -q64 " ; CXXFLAGS="${CXXFLAGS} -q64 "; LDFLAGS="${LDFLAGS} -q64 " ; AR="ar -X 64" ; NM="nm -B -X 64" ; ;;
		esac
		;;
	    sparc-sun-solaris2* )
		case ${CC} in
		    cc ) CFLAGS="${CFLAGS} -xarch=v9" ; LDFLAGS="${LDFLAGS} -xarch=v9" ; ;;
		esac
		;;
	    x86_64-unknown-linux-gnu )
		case ${CC} in
		    gcc ) CFLAGS="${CFLAGS} -m64" ; LDFLAGS="${LDFLAGS} -m64" ; ;;
# fxm: Add pgcc switches
#		    pgcc ) CFLAGS="${CFLAGS} -64 -mips4" ; LDFLAGS="${LDFLAGS} -64" ; ;;
		esac
		;;
	esac

	AC_CHECK_LIB([netcdf],[nc_close],AC_MSG_NOTICE([Adding 64-bit ABI compiler flags]),[
		echo "ERROR: Unable to compile and link executable with \"libnetcdf.a\" with LDFLAGS=${LDFLAGS}"
		echo "1. If netCDF is not installed, then download and install it:"
		echo "http://www.unidata.ucar.edu/packages/netcdf"
		echo "2. If netCDF is installed correctly, set NETCDF_LIB to directory with libnetcdf.a"
		echo "3. If configure fails here with NETCDF_LIB set correctly, try changing CC and/or CFLAGS until compilation and linking to libnetcdf.a works"
		echo "Currently CC=\"${CC}\" and CFLAGS=\"${CFLAGS}\" do not work with libnetcdf.a"
		echo "Set environment variables CC and CFLAGS to working values and then re-run ./configure"
		AC_MSG_ERROR([Mandatory netCDF link test failed]) ] ) ]
)
# End Mandatory Link Test with libnetcdf.a

fi # enable_dap

echo "DEBUG: LIBS = $LIBS"

##################################################
# Begin Library checks
# Check for libraries, add to link path if found
##################################################

#AC_CHECK_LIB([C],[cosf])
AC_CHECK_LIB([f95],[_g95_ac_array],,,[-lm])
AC_CHECK_LIB([m],[sin])
AC_CHECK_LIB([sunmath],[sinf])
NCO_CHECK_FUNCS([getopt getopt_long])
AC_CHECK_FUNC(getopt_long,,[nco_need_getopt_long='yes'])
AM_CONDITIONAL(NCO_NEED_GETOPT_LONG,test "${nco_need_getopt_long}" = 'yes')
# NCO_CHECK_FUNC also defines NEED_xxxx when xxxx function is not found
NCO_CHECK_FUNCS([acosf asinf atanf cosf expf fabsf fmodf log10f logf powf sinf sqrtf tanf])
NCO_CHECK_FUNCS([erff erfcf gammaf])
NCO_CHECK_FUNCS([acoshf asinhf atanhf coshf sinhf tanhf])
NCO_CHECK_FUNCS([ceilf floorf])
NCO_CHECK_FUNCS([nearbyintf rintf roundf truncf])
NCO_CHECK_FUNCS([getopt_long])
NCO_CHECK_FUNCS([strdup strcasecmp])
AC_CHECK_LIB([intl],[gettext])
AC_CHECK_LIB([resolv],[res_init])
AC_CHECK_LIB([socket],[main])
AC_CHECK_LIB([thread],[main])
AC_CHECK_LIB([nsl],[main])
AC_CHECK_LIB([nco],[nco_open])
# End Library checks

# OPeNDAP (aka DAP) support was here
# I moved it up to precede netcdf library tests jhrg 05/26/05

echo "DEBUG: LIBS=$LIBS"
echo "DEBUG: enable_mpi = '$enable_mpi'"

if (test "${enable_mpi}" = 'yes'); then
	echo ""
	echo "##################################################"
	echo "#  Sorting out MPI (LAM/MPICH) build parameters  #"
	echo "#        (only works on Linux so far)            #"
	echo "##################################################"
	echo ""
#	AC_ARG_VAR([BIN_MPI_PROGRAMS],[List of MPI NCOs - not user configurable])
	AC_ARG_VAR([DEFS],[List of MPI NCOs - not user configurable])
	AC_ARG_VAR([HAVE_MPI_H],[configure finds mpi.h - not user configurable])
#	AC_ARG_VAR([ENABLE_MPI],[configure finds mpi.h - not user configurable])

	# based on this, if MPI_CC is defined, have to include <mpi.h> and include mpnc* build targets to be made with MPI_CC
	# the rest can be made with ${CC} as usual.

	AC_ARG_VAR([MPICH2_ROOT],[Root of non-std MPICH2 installation] (compile-time))
	AC_ARG_VAR([LAM_ROOT],[Root of non-std LAM installation] (compile-time))
#	echo "before loop, MPICH2_ROOT = ${MPICH2_ROOT}"
	if (test "${MPICH2_ROOT}" != ""); then
#		echo "in loop, MPICH2_ROOT = ${MPICH2_ROOT}"
		CPPFLAGS="-I${MPICH2_ROOT}/include ${CPPFLAGS}"
		LDFLAGS="-L${MPICH2_ROOT}/lib ${LDFLAGS}"
	fi

	# following may have to AC_DEFINE ENABLE_MPI to pass to Makefile.
	AC_ARG_ENABLE(mpi,AS_HELP_STRING([--enable-mpi],[Build NCOs for Message Passing Interface (detects LAM or MPICH2) [[default=no]]]),enable_mpi=yes,enable_mpi=no)

	# is there a mpicc (linux)or mpcc (AIX)?
	AC_CHECK_PROGS(MPI_CC, [mpicc  mpcc], "NONE", ${PATH})

	# if MPI_CC = 'mpcc' (AIX), everything else is set up correctly, so no need to check for mpi.h, libmpi etc

	if test "${MPI_CC}" == "mpicc"; then
		# is there an mpi.h?
		AC_CHECK_HEADER(mpi.h,[AC_DEFINE([ENABLE_MPI],[1],[Enable special compilation for MPI with mpicc])])
		AC_CHECK_HEADER(mpi.h, [HAVE_MPI_H="yes"], [HAVE_MPI_H="no"], [])
		if test "${HAVE_MPI_H}" = "yes"; then
			# define for src/nco/Makefile.in
			CC="mpicc"
			CPP="mpicc"
			AC_MSG_NOTICE([MPI enabled])
		else
			AC_MSG_NOTICE([MPI DISabled])
		fi

		# test for MPICH2 1st; if found, skip LAM as MPICH seems more stable and coherent
		if (test "${enable_mpi}" = 'yes' && test "${HAVE_MPI_H}" = "yes" ); then
			# test for diagnostic libs, 1st MPICH2
			AC_SEARCH_LIBS(aio_write64,rt,[])  # automatically adds the lib to $LIBS
			AC_CHECK_LIB([mpich],[MPIDU_Sock_get_sock_id],enable_mpich2=yes,enable_mpich2=no,[])
			if test "${enable_mpich2}" = 'yes'; then
				LIBS="-lmpich ${LIBS}";
			else
				echo "MISSING libmpich. Will test for LAM-MPI";
			fi
		fi

		# test for LAM-MPI
		if (test "${enable_mpi}" = 'yes' && test "${HAVE_MPI_H}" = 'yes' && test "${enable_mpich2}" = 'no'); then
			# test for diagnostic libs, 1st LAM_ROOT
			AC_CHECK_LIB([lam],[lam_F_free_hdl],enable_lam=yes,enable_lam=no,[])
			if test "${enable_lam}" = 'yes'; then
				LIBS="-llam -lmpi ${LIBS}";
				AC_MSG_NOTICE([Found liblam - MPI-LAM enabled])
			else
				AC_MSG_NOTICE([MISSING liblam - could not find a liblam.[a|so].])
			fi
		fi
	fi

	# finish MPI section by echoing MPI-related vars if all other params are OK.
	if ( test "${enable_mpich2}" = 'yes' || test "${enable_lam}" = 'yes'); then
		echo "MPI: Using MPI_CC=${MPI_CC} and LIBS=${LIBS}"
		echo "MPI: Building shared libs conflicts with MPI; shared libs have been disabled."
		# 'enable_shared' value is passed to build system via AC_DEFINE below
		enable_shared='no'
	fi
	echo "### End MPI Checks ###"
	echo ""
fi

AM_CONDITIONAL(ENABLE_MPI,[test "${enable_mpi}" = 'yes'])
AM_CONDITIONAL(ENABLE_LAM,[test "${enable_lam}" = 'yes'])
AM_CONDITIONAL(ENABLE_MPICH2,[test "${enable_mpich2}" = 'yes'])
AC_DEFINE_UNQUOTED([MPICH2_ROOT],["$MPICH2_ROOT"],[Location of mpich2 src root])


# Begin Fortran
# If --enable-fortran define USE_FORTRAN_ARITHMETIC
AC_ARG_ENABLE(fortran,AS_HELP_STRING([--enable-fortran],[Use Fortran arithmetic (deprecated) [[default=no]]]),enable_fortran=${enableval},enable_fortran=no)
if test "${enable_fortran}" = 'yes'; then
    AC_DEFINE(USE_FORTRAN_ARITHMETIC,1,Use Fortran arithmetic)
fi
# End Fortran

# Begin i18n
# i18n support (experimental, for future use)
AC_ARG_VAR(I18N_SHARE,Root of internationalization (i18n) locale directories (run-time))
# Add user-specified netCDF locations, if any, else add /usr/local/ locations if they exist
if test "${I18N_SHARE}"; then
    if test -d "${I18N_SHARE}"; then
	echo "I18N_SHARE directory exists"
    else
	echo "WARNING: I18N_SHARE location \"${I18N_SHARE}\" does not exist!"
    fi
else
    if test -d "/usr/share/locale"; then
	I18N_SHARE="/usr/share/locale"
    fi
fi
AC_ARG_ENABLE(i18n,AS_HELP_STRING([--enable-i18n],[Internationalization (i18n) support (WARNING: Experimental, for future use) [[default=no]]]),enable_i18n=${enableval},enable_i18n=no)

# Check for i18n libraries unless told otherwise
if test "${enable_i18n}" != 'no'; then
# These must all be present for i18n to work. If all present, enable_i18n=yes
    AC_CHECK_LIB([intl],[main],nco_have_libintl=yes,)
    if test "${enable_i18n}" = 'no'; then
	AC_MSG_WARN([i18n support disabled (missing libraries)])
    elif test "${enable_i18n}" = 'yes'; then
	AC_DEFINE(I18N,1,i18n support requested)
	AC_MSG_NOTICE([i18n support enabled (WARNING: Experimental, for future use)])
	LIBS="-lmfhdf -li18n ${LIBS}"
    fi
fi
# End i18n

# Begin largefile
# If --enable-largefile define ENABLE_LARGEFILE
# fxm: TODO bld45 Obsolete! Replace with test for 64-bit offset support (i.e., netCDF 3.6)
if test "${enable_largefile}" = 'yes'; then
    echo "We recommend against using this approach; use only if you cannot use netcdf 3.6 and above.  That said, we'll try..."
    AC_DEFINE(ENABLE_LARGEFILE,1,Enable Large File Support (LFS))
fi
# End largefile

# Begin nco_c++
# If --enable-nco_cplusplus, compile NCO C++ interface library
AC_ARG_ENABLE(nco_cplusplus,AS_HELP_STRING([--enable-nco_cplusplus],[Build NCO C++ interface library [[default=yes]]]),enable_nco_cxx=${enableval},enable_nco_cxx=yes)
# End nco_c++

# Begin rx
# Check to enable regular expression stuff, allow user to override
AC_ARG_ENABLE(regex,AS_HELP_STRING([--enable-regex],[Allow extended regular expressions [[default=yes]]]),nco_have_regex=${enableval},nco_have_regex=yes)
if test "x${nco_have_regex}" = xyes; then
    AC_CHECK_HEADER([regex.h],AC_DEFINE([HAVE_REGEX_H],1,[Define to 1 if <regex.h> is present]),nco_have_regex=no)
    AC_CHECK_HEADER([sys/types.h],AC_DEFINE([HAVE_SYS_TYPES_H]),nco_have_regex=no)
    AC_CHECK_FUNC([regexec],AC_DEFINE([HAVE_REGEXEC],1,[Define to 1 if 'regexec()' is present]),nco_have_regex=no)
    AC_CHECK_FUNC([regcomp],AC_DEFINE([HAVE_REGCOMP],1,[Define to 1 if 'regcomp()' is present]),nco_have_regex=no)
    AC_CHECK_FUNC([regfree],AC_DEFINE([HAVE_REGFREE],1,[Define to 1 if 'regfree()' is present]),nco_have_regex=no)
fi
if test "x${nco_have_regex}" = xyes; then
    AC_DEFINE(NCO_HAVE_REGEX_FUNCTIONALITY,1,POSIX extended regular expressions available)
fi
# End rx

# Old placement of Shared libs stanza

echo ""
echo "########################################"
echo "#     Testing for UDUNITS support      #"
echo "########################################"
echo ""
echo "DEBUG: LIBS = $LIBS"

# Begin UDUnits
# MacOS X requires libudport for threaded functions
AC_CHECK_FUNC(tdelete,,AC_CHECK_LIB([udport],[tdelete]))
AC_ARG_ENABLE(udunits,AS_HELP_STRING([--enable-udunits],[Build-in UDUnits support if possible [[default=yes]]]), enable_udunits=${enableval}, enable_udunits=yes)
# Check for UDUnits libraries unless told not to
if test "${enable_udunits}" != 'no'; then
  if test "${UDUNITS_PATH}"; then
# Add ${UDUNITS_PATH}/lib to search path if present
    nco_udunits_dat=${UDUNITS_PATH}/etc/udunits.dat
    LDFLAGS="${LDFLAGS} -L${UDUNITS_PATH}/lib"
    CPPFLAGS="${CPPFLAGS} -I${UDUNITS_PATH}/include"
#    nco_udunits_dat=${UDUNITS_PATH}/src/lib/udunits.dat
  elif test "${NETCDF_INC}"; then
    nco_udunits_dat="${NETCDF_INC}/../etc/udunits.dat"
  else
    nco_udunits_dat="/usr/local/etc/udunits.dat"
  fi
# warn if udunits.dat is not found, but continue anyway since the builder may savy and know to add it later, like when building packages (e.g. .debs)
  AC_CHECK_FILE([$nco_udunits_dat],,AC_WARN([file $nco_udunits_dat was not found but will be compiled into NCO. Some executables may fail without it.]))
  # Use DEFINE_UNQUOTED for quoted string so quotes get correctly merged into source file
  AC_DEFINE_UNQUOTED([UDUNITS_PATH],["$nco_udunits_dat"],[Location of UDUnits data file])
  # MacOS X requires libudport for threaded functions
  # Following need to know about non-standard Lib locations if used

  AC_CHECK_FUNC(tdelete,,AC_CHECK_LIB([udport],[tdelete]))
    AC_MSG_NOTICE([NB: Following tests of UDUnits library and header must succeed for UDUnits support:])
    AC_CHECK_LIB([udunits],[utInit],,enable_udunits=no)
    if test "${UDUNITS_PATH}"; then
       AC_CHECK_FILE([${UDUNITS_PATH}/include/udunits.h],AC_DEFINE([HAVE_UDUNITS_H],1,[Define to 1 if <udunits.h> is present]),enable_udunits=no)
    else
      AC_CHECK_HEADER([udunits.h],AC_DEFINE([HAVE_UDUNITS_H],1,[Define to 1 if <udunits.h> is present]), enable_udunits=no)
    fi
    if test "${enable_udunits}" = 'no'; then
	AC_MSG_WARN([UDUnits support disabled (missing/unusable library or header file)])
    elif test "${enable_udunits}" = 'yes'; then
	LIBS="${LIBS} -ludunits"
	AC_DEFINE(ENABLE_UDUNITS,1,Compile operators with UDUnits support)
	AC_MSG_NOTICE([UDUnits support enabled])
fi
# When empty, utInit() uses environment variable UDUNITS_PATH, if any (see nco_lmt.c)
# Thus UDUNITS_PATH need not be known at compile time
#    AC_ARG_VAR([UDUNITS_PATH],Location of UDUnits database 'udunits.dat' (run-time))
    AC_ARG_VAR([UDUNITS_PATH], Root dir of compiled UDUnits code if not installed for system)
fi
# This would activate conditional UDUnits tests, if there were any
#AM_CONDITIONAL(TEST_UDUNITS,[test "${enable_udunits}" = 'yes'])
# End UDUnits

# Begin Default OS-specific Compiler Arguments
# Perform standard additions to compilers and preprocessor flags before testing anything
# NB: These flags take effect regardless of enable-[debug/optimize]-custom setting
case ${host} in
    i*86-*-linux-gnu )
	case ${CC} in
	    icc ) CFLAGS="${CFLAGS} -std=c99" ; CPPFLAGS="${CPPFLAGS} -D_BSD_SOURCE -D_POSIX_SOURCE -no-gcc" ; ;;
	esac
	;;
    powerpc-ibm-aix* )
	case ${CC} in
	    gcc ) CFLAGS="${CFLAGS} -maix64" ; ;;
# -qmaxmem=num Limit memory used by space intensive optimizations to <num> kilobytes
# -qspill=size Size in B of register allocation spill area, mie needs > 1040 B
# -qlanglvl=extc99: Include orthogonal extensions to C99 standard
	    xlc* ) CFLAGS="${CFLAGS} -O3 -g -qstrict -Q -qsmp=omp -qlanglvl=extc99 -qmaxmem=8192 -qspill=2048 -q64" ; ;;
#    CPPFLAGS="${CPPFLAGS} -qlanglvl=extended"
	esac
	case ${CXX} in
# -bh:5 suppresses annoying messages from xlC linker WARNING: Duplicate symbol: ...
	    xlC* ) LDFLAGS="${LDFLAGS} -bh:5" ;
	esac
esac
# End Default OS-specific Compiler Arguments

# Begin custom GCC switches
# Perform elaborate "or" test since autoconf does not like [ -o ] syntax
GCC_OR_GXX='no'
if test "x${GCC}" = 'xyes'; then
    GCC_OR_GXX='yes'
fi
if test "x${GXX}" = 'xyes'; then
    GCC_OR_GXX='yes'
fi
if test "x${GCC_OR_GXX}" = 'xyes' ; then
# Explain and set common custom GCC flags once, here, and modify later to suit
# since GCC has same base optimization and debugging flags on all architectures

# Compilation flags for numerical routines recommended by GSL 1.3 manual, p. 397
# CFLAGS += -Werror -Wall -W -Wmissing-prototypes -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -fno-common -g -O4
    GCC_CMD_ARGS='-std=c99 -pedantic -D_BSD_SOURCE -D_POSIX_SOURCE'
    GCC_BASE_FLAGS='-Werror -Wall -Wunused -W -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -fno-common -g -O4'
    GCC_CFLAGS="${GCC_BASE_FLAGS} -Wmissing-prototypes"
    GCC_CXXFLAGS="${GCC_BASE_FLAGS}"
# Compilation flags recommended by GSL that I like and use:
# -D_BSD_SOURCE: Support 4.3 BSD Unix extensions to ANSI C (prevents nameser.h warnings)
# -D_POSIX_SOURCE: Support POSIX.1 standard additions to ANSI C (prevents fileno warnings)
# -pedantic: Disallow non-ISO constructs (including type long long) (sometimes useful)
# -Werror: Consider warnings as errors
# -W: Extra warnings, including missing return values, comparison of signed with unsigned
# -Wall: Warn about common programming problems
# -Wmissing-prototypes: Warn if missing prototypes (C only, not C++)
# -Wshadow: Warn if local variable has same name as other local variable
# -Wpointer-arith: Warn if pointer arithmetic on types without size, e.g., void
# -Wcast-qual: Warn if const qualifier removed from pointer
# -Wcast-align: Warn if casting pointer to type of different size
# -Wwrite-strings: Apply const-qualifier to string constants, die if overwritten
# -fno-common: Prevent global variables from being simultaneously defined in different files
# -g: Put debugging symbols in executable
# -O4: Turn on optimization so unitialized variables are flagged
# Compilation flags recommended by GSL that I do not like and do not use:
# -ansi: Support only strict ANSI C. Equivalent to -std=c89, conflicts with -std=c99
# --no-alias? -fstrict-aliasing
# -Waggregate-return: Warn if functions return aggregates like structures or unions
# -Wconversion: Warn if converting signed to unsigned. Intended for obsolete, non-prototyped code. Triggers fabsf(), sqrtf(), warnings.
# -Wnested-externs: Warn if extern is encountered within function. C only?
# -Wstrict-prototypes: Warn if inconsistent prototypes. C only?
# -Wtraditional: Warn if constructs differ between traditional and ANSI C. C only?
# -Dinline=: inline is not an ANSI keyword, must undefine inline to work with -ansi
# -fshort-enums: Make enums as short as possible, ususally non-int. Do not ever invoke this! This breaks ABI and causes subtle problems
fi
# End custom GCC switches

# Begin enable_debug_custom
# Custom debug: Activate all known, helpful compile-time and run-time debugging checks
AC_ARG_ENABLE(debug-custom,AS_HELP_STRING([--enable-debug-custom],[Activate all known, helpful compile-time and run-time debugging checks such as pedantic warnings, bounds checking (slowest execution). Automatically activates --enable-debug-symbols. [[default=no]]]),enable_debug_custom=${enableval},enable_debug_custom=no)
if test "${enable_debug_custom}" = 'yes'; then
    AC_DEFINE(ENABLE_DEBUG_CUSTOM,1,[Custom debugging: Pedantic, bounds checking (slowest execution)])
    if test "x${GCC}" = 'xyes' ; then
	CC="${CC} ${GCC_CMD_ARGS}"
# fxm: What to do with default -g -O2 flags? Be redundant for now...
	CFLAGS="${CFLAGS} ${GCC_CFLAGS}"
	if test "x${GXX}" = 'xyes' ; then
	    CXXFLAGS="${GCC_CXXFLAGS}"
	fi
    fi
# Other switches are compiler-specific
    case ${host} in
	alpha*-dec-osf* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -check_bounds -check -check_omp" ; ;;
	    esac
	    ;;
	*-cray-unicos* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -h rounddiv -h indef -h bounds -h nofastmd -h nofastmodulus" ; ;;
	    esac
	    ;;
	mips*-sgi-irix* )
	    if test "x${CC}" = xcc; then
		CFLAGS="${CFLAGS} -trapuv"
	    fi
	    ;;
	powerpc-apple-darwin* )
	    ;;
	powerpc-ibm-aix* )
	    case ${CC} in
		xlc* ) CFLAGS="${CFLAGS} -qflttrap -qidirfirst -qlonglong -qwarn64 -qcheck=all -qhalt=s"
		    case ${CXX} in
			xlC* ) CXXFLAGS="${CFLAGS}"
		    esac
		    ;;
	    esac
	    ;;
	rs6000-ibm-aix* )
	    ;;
	sparc-sun-solaris2 )
	    ;;
	sx*-nec-superux* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -h0 -hstack=nan" ; ;;
	    esac
	    ;;
    esac

# Check for debugging libraries
    AC_CHECK_LIB([ccmalloc],[main],,AC_MSG_WARN([Unable to find ccmalloc library]) )
    AC_CHECK_LIB([dl],[main],,AC_MSG_WARN([Unable to find dl library]) )

fi
# End enable_debug_custom

# Begin enable_debug_symbols
# If --enable-debug-symbols, add these compiler flags
AC_ARG_ENABLE(debug-symbols,AS_HELP_STRING([--enable-debug-symbols],[Debugging symbols: Produce symbols for debuggers (e.g., dbx, gdb) [[default=no]]]),enable_debug_symbols=${enableval},enable_debug_symbols=no)
# Custom debug automatically invokes debugging symbols
if test "${enable_debug_custom}" = 'yes'; then
    enable_debug_symbols='yes';
fi
if test "${enable_debug_symbols}" = 'yes'; then
    AC_DEFINE(ENABLE_DEBUG_SYMBOLS,1,Debugging symbols: Produce symbols for debuggers (e.g., dbx, gdb))
# All known architectures use -g to turn on debugging symbols
    CFLAGS="${CFLAGS} -g"
fi
# End enable_debug_symbols

# Begin enable_optimize_custom
# Activate all known, helpful switches for fastest possible run-time performance
# These switches are highly compiler and architecture dependent
# Settings should improve performance relative to default ./configure setttings
AC_ARG_ENABLE(optimize-custom,AS_HELP_STRING([--enable-optimize-custom],[Activate all known, helpful switches for fastest possible run-time performance (slowest compilation) [[default=no]]]),enable_optimize_custom=${enableval},enable_optimize_custom=no)
if test "${enable_optimize_custom}" = 'yes'; then
    AC_DEFINE(ENABLE_OPTIMIZE_CUSTOM,1,Fastest possible execution (slowest compilation))
    if test "x${GCC}" = 'xyes' ; then
# fxm: TODO #303 go through GCC manual and add more speedy flags
# Until then, GCC has interesting property that --enable-optimize-custom flags equal --enable-optimize-debug flags!
	CC="${CC} ${GCC_CMD_ARGS}"
	CFLAGS="${CFLAGS} ${GCC_CFLAGS}"
	if test "x${GXX}" = 'xyes' ; then
	    CXXFLAGS="${GCC_CXXFLAGS}"
	fi
    fi
    case ${host} in
	alpha*-dec-osf* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -O2 -ansi-alias" ; ;;
	    esac
	    ;;
	*-cray-unicos* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -h rounddiv -h nofastmd -h nofastmodulus" ; ;;
	    esac
	    ;;
	mips*-sgi-irix* )
	    if test "x${CC}" = xcc; then
		CFLAGS="${CFLAGS} -O2"
	    fi
	    ;;
	powerpc-ibm-aix* )
	    case ${CC} in
# -qstrict: Ensure that -O3 optimizations do not alter program semantics
# -Q : Inline all appropriate subprograms
		xlc* ) CFLAGS="${CFLAGS} -O3 -qstrict -Q"
		    case ${CXX} in
			xlC* ) CXXFLAGS="${CFLAGS}"
		    esac
		    ;;
	    esac
	    ;;
	rs6000-ibm-aix* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -O" ; ;;
	    esac
	    ;;
	sparc-sun-solaris2 )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -O2" ; ;;
	    esac
	    ;;
	sx*-nec-superux* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -h2 -hmath vector -hxint" ; ;;
	    esac
	    ;;
    esac
fi
# End enable_optimize_custom

# Begin pvmgetarch Compatibility
# Compatibility map between pvmgetarch and GNU triplets
# Maintained as master list of architectures on which NCO is known to work
case ${host} in
    alpha*-dec-osf* ) AC_DEFINE(LINUXALPHA,1,Compatibility pvmgetarch token for OSF on DEC Alpha)
	;;
    alpha*-*-linux* ) AC_DEFINE(LINUXALPHA,1,Compatibility pvmgetarch token for Linux on DEC Alpha)
	;;
    hppa*-hp-hpux* ) AC_DEFINE(HPUX,1,Compatibility pvmgetarch token for HPUX on PA RISC)
	;;
    i*86-pc-freebsd* ) AC_DEFINE(FREEBSD,1,Compatibility pvmgetarch token for FreeBSD on Intel x86)
	;;
    i*86-pc-linux* ) AC_DEFINE(LINUX,1,Compatibility pvmgetarch token for Linux on Intel x86) linux=1
	;;
    i*86-pc-cygwin* ) AC_DEFINE(WIN32,1,Compatibility pvmgetarch token for Windows on Intel x86)
	;;
    mips*-sgi-irix* ) AC_DEFINE(SGIMP64,1,Compatibility pvmgetarch token for IRIX on SGI MIPS)
	;;
    powerpc-apple-darwin* ) AC_DEFINE(MACOSX,1,Compatibility pvmgetarch token for Apple Mac OSX)  macosx=1
	;;
    powerpc-ibm-aix* ) AC_DEFINE(AIX,1,Compatibility pvmgetarch token for AIX on IBM PowerPC)
	;;
    powerpc-*-linux* ) AC_DEFINE(LINUXPPC,1,Compatibility pvmgetarch token for Linux on PowerPC)
	;;
    rs6000-ibm-aix* ) AC_DEFINE(LINUXPPC,1,Compatibility pvmgetarch token for AIX on IBM RS6000)
	;;
    sparc64-*-linux* ) AC_DEFINE(LINUXSPARC64,1,Compatibility pvmgetarch token for Linux on Sun Sparc)
	;;
    sparc-sun-solaris2 ) AC_DEFINE(SUNMP,1,Compatibility pvmgetarch token for Solaris 2.x on Sun Sparc)
	;;
    sx*-nec-superux* ) AC_DEFINE(NECSX,1,Compatibility pvmgetarch token for SuperUX on NEC SX)
	;;
	 x86_64*-linux* ) AC_DEFINE(LINUXAMD64,1,Compatibility pvmgetarch token for Linux on AMD x86_64)
	;;
esac
# End pvmgetarch Compatibility

# Begin netCDF test data
AC_PATH_PROG(path_to_ncgen,ncgen,,)
if test "${path_to_ncgen}"; then
    AC_MSG_NOTICE(Creating sample netCDF data files for self-tests)
    ${path_to_ncgen} -b -o data/in.nc data/in.cdl
    for fl in 85.nc 86.nc 87.nc 88.nc 89.nc h0001.nc h0002.nc h0003.nc; do
	if (test -f data/${fl}); then
	    printf ""
	else
	    ${LN_S} in.nc data/${fl};
	fi
    done
    if (test -f src/nco_c++/in.nc); then
	printf ""
    else
	${LN_S} ../../data/in.nc src/nco_c++/in.nc
    fi
else
    echo "ERROR: Unable to find 'ncgen'"
    echo "netCDF data files for testing were not created"
    echo "Do this manually in data/ subdirectory before running \"make check\""
fi
# End netCDF test data

# Tell GNU C compiler to use C99 standard (older gcc versions default to C89)
# fxm: only do this for gcc, not g++
if (test $ac_compiler_gnu == "yes"); then
    CFLAGS="$CFLAGS -std=c99 -D_BSD_SOURCE -D_POSIX_SOURCE"
    if (test "${macosx}" = 1); then
	CFLAGS=`echo "${CFLAGS}" | sed -e 's/-D_POSIX_SOURCE//'`
	CFLAGS="-fno-common $CFLAGS"
# MacOSX doan understand no steekin shared libs.
	enable_shared='no'
    fi
fi

# Drop C99 switches when compiling NCO with C++ compiler, e.g., CC=g++
case ${CC} in
    g\+\+* | icpc* ) CC=`echo "${CC}" | sed -e 's/-std=c99//'` ; CC=`echo "${CC}" | sed -e 's/-pedantic//'` ; CFLAGS=`echo "${CFLAGS}" | sed -e 's/-std=c99//'` ; CFLAGS=`echo "${CFLAGS}" | sed -e 's/-Wmissing-prototypes//'` ; ;;
    xlC* ) CC=`echo "${CC}" | sed -e 's/-qlanglvl=extc99//'` ; CFLAGS=`echo "${CFLAGS}" | sed -e 's/-qlanglvl=extc99//'` ; CFLAGS="${CFLAGS} -qlonglong" ; ;;
esac

echo ""
echo "###############################"
echo "#    Require Shared Libs?     #"
echo "###############################"

# If --enable-shared define ENABLE_SHARED
echo "DEBUG: enable_shared: ${enable_shared} "
if (test "${enable_shared}" = 'yes' && test "${enable_netcdf4}" = 'no'); then
	AC_DEFINE(ENABLE_SHARED,1,Enable shared libraries)
else
	echo "DEBUG: enable_shared: rejected due to netcdf4 requirement"
#	AC_DEFINE(ENABLE_SHARED,0,Enable shared libraries)
fi
# End Shared

# Begin Static
# If --enable-static define ENABLE_STATIC
if test "${enable_static}" = 'yes'; then
    AC_DEFINE(ENABLE_STATIC,1,Enable static libraries)
fi
# End Static

# Begin config
AC_CONFIG_FILES([Makefile data/Makefile src/Makefile src/nco/Makefile man/Makefile doc/Makefile])
if test "${ac_cv_cxx_have_valarray}" = 'yes' \
    && test "${enable_nco_cxx}" = 'yes' ; then
    AC_CONFIG_FILES(src/nco_c++/Makefile)
    NCO_CXX="nco_c++"
else
    NCO_CXX=
fi
AC_SUBST(NCO_CXX)
AC_OUTPUT
# End config

# Echo build parameters for debugging
echo ""
echo ""
echo "Configuration Parameters:"
echo "AR_FLAGS............. ${AR_FLAGS}"
echo "CC................... ${CC}"
echo "CFLAGS............... ${CFLAGS}"
echo "CPP.................. ${CPP}"
echo "CPPFLAGS............. ${CPPFLAGS}"
echo "CXX.................. ${CXX}"
echo "CXXFLAGS............. ${CXXFLAGS}"
#echo "ENABLE_MPI........... ${ENABLE_MPI}"
#echo "HAVE_MPI_H........... ${HAVE_MPI_H}"
echo "HOST................. ${HOST}"
echo "host................. ${host}"
echo "HOSTNAME............. ${HOSTNAME}"
echo "LDFLAGS.............. ${LDFLAGS}"
echo "LIBS................. ${LIBS}"
echo "NETCDF4_ROOT......... ${NETCDF4_ROOT}"

# Inform users of the very useful configure.eg
echo ""
echo "*******************************************************************"
echo "If the build process fails, please examine the file 'configure.eg'"
echo "in the top-level NCO directory.  It contains examples known to"
echo "build NCO for various platforms and compilers."
echo "*******************************************************************"
