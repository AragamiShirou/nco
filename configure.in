# $Header: /data/zender/nco_20150216/nco/configure.in,v 1.97 2004-07-21 00:09:06 zender Exp $ -*-Shell-script-*-

# Purpose: Template used by autoconf to generate NCO ./configure script
# More recent software calls this file configure.ac, older software calls it configure.in

# Copyright (C) 2003--2004 Charlie Zender and Rorik Peterson
# This software may be modified and/or re-distributed under the terms of the GNU General Public License (GPL) Version 2
# See http://www.gnu.ai.mit.edu/copyleft/gpl.html for full license text

# Usage: 
# autoconf
# cd ~/nco;aclocal;autoheader;automake --foreign;autoconf
# cd ~/nco;make distclean;aclocal;autoheader;automake --foreign;autoconf;configure;make install

# Process file with autoconf to produce configure script
# (package name,version,bug-report-address,tarball name)
AC_INIT([NCO netCDF Operators],[2.9.7],[help@nco.sf.net],[nco])

# Print GNU copyright in configure script
AC_COPYRIGHT

# Safety check that correct --srcdir was specified
AC_CONFIG_SRCDIR([src/nco/ncks.c])
# Put helper scripts here to reduce top level clutter
AC_CONFIG_AUX_DIR(autobld)

# Get build system parameters, need config.guess and config.sub to use these
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

# Get version
if test -r doc/VERSION; then
    nco_version=`cat doc/VERSION`
#  AC_DEFINE_UNQUOTED(VERSION,${nco_version},NCO Version)
fi

# Get hostname and user
if test "${USER}"; then
    nco_user=${USER};
elif test "${LOGNAME}"; then
    nco_user="${LOGNAME}"; 
else 
    nco_user="nobody";
fi
AC_DEFINE_UNQUOTED(USER,${nco_user},User)
if test "${HOSTNAME}"; then
    nco_hostname="${HOSTNAME}"
elif test "${HOST}"; then
    nco_hostname="${HOST}"
else
    nco_hostname="nowhere";
fi
AC_DEFINE_UNQUOTED(HOST,${nco_hostname},Hostname)
AC_DEFINE_UNQUOTED(HOSTNAME,${nco_hostname},Hostname alias)
AC_DEFINE_UNQUOTED(GNU_TRP,${build},Autoconf-generated architecture \"triplet\")

# Use automake to create Makefiles
#AM_INIT_AUTOMAKE
AM_INIT_AUTOMAKE(nco,"${nco_version}")

# Put preprocessor symbols in config.h
AM_CONFIG_HEADER(config.h)

# Check for build chain
# CC and CXX have preferred lists
# AC_PROG_CC sets GCC to 'yes' when GCC is detected 
# AC_PROG_CC sets CFLAGS = -g [-O2 iff GCC] 
AC_PROG_CC(xlc_r xlc acc cc gcc gcc-2 icc como c89)
AC_PROG_CXX(xlC_r xlC aCC CC cxx g++ g++-2 c++ icc como)
AC_PROG_CPP
AC_PROG_CXXCPP
AC_PROG_CC_STDC
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL

AM_CONDITIONAL(BUILD_NCAP,[test "${YACC}" != "yacc" || test -e "src/nco/ncap_yacc.c"])

# Disable maintainer-only options in generated Makefiles unless flag
# --enable-maintainer-mode is given at configure time
AM_MAINTAINER_MODE

# Check for specific library functions and take corrective action when buggy versions found
AC_FUNC_MEMCMP
AC_FUNC_STAT
AC_FUNC_STRTOD

# Check for library functions, if found then #define HAVE_FUNCTION in config.h
AC_CHECK_FUNCS([floor canonicalize_file_name gethostname memchr memmove memset mkstemp pow readlink realpath regcomp setlocale sqrt strchr strerror strpbrk strrchr strstr strtol])

# Check for header files
AC_HEADER_STDC
AC_CHECK_HEADERS([getopt.h libintl.h limits.h locale.h netinet/in.h stdlib.h string.h unistd.h])
AC_LANG_PUSH(C++)
AC_CHECK_HEADERS(cstdlib)
AC_LANG_POP(C++)

# Check for typedefs, structures, and compiler characteristics
# Allow wanton use of 'const' despite compiler
AC_C_CONST
# Allow inline, use __inline__ or __inline, or remove inline as appropriate
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_TYPE_UID_T
AC_CHECK_TYPES([ptrdiff_t])
AC_CHECK_SIZEOF(int*)
AC_CXX_HAVE_VALARRAY
# Arrange for large file support (LFS)
AC_SYS_LARGEFILE

# Begin Mandatory Link Test with libnetcdf.a
# Make precious variables for ./configure --help
AC_ARG_VAR(NETCDF_INC,Location of netCDF headers (compile-time))
AC_ARG_VAR(NETCDF_LIB,Location of netCDF library (compile-time))
# Add user-specified netCDF locations, if any, else add /usr/local/ locations if they exist
if test "${NETCDF_LIB}"; then
    if test -d "${NETCDF_LIB}"; then
	LDFLAGS="${LDFLAGS} -L${NETCDF_LIB}"
    else
	echo "WARNING: NETCDF_LIB location \"${NETCDF_LIB}\" does not exist!"
    fi
else
    if test -d "/usr/local/lib"; then
	LDFLAGS="-L/usr/local/lib ${LDFLAGS}"
    fi
fi
if test "${NETCDF_INC}"; then
    if test -d "${NETCDF_INC}"; then
	CPPFLAGS="${CPPFLAGS} -I${NETCDF_INC}"
    else
	echo "WARNING: NETCDF_INC location \"${NETCDF_INC}\" does not exist!"
    fi
else
    if test -d "/usr/local/include"; then
	CPPFLAGS="-I/usr/local/include ${CPPFLAGS}"
    fi
fi
AC_CHECK_HEADERS([netcdf.h])
# NCO does not support netCDF2
AC_DEFINE(NO_NETCDF_2,1,No netCDF version 2.x API)
# Check for 'nc_open()' using default compiler flags
# If this fails, check for 'nc_close()' with 64-bit ABI flags (if known)
# [nc_open() is cached---checking for it twice does not work]
AC_MSG_NOTICE([Checking default compiler flags])
AC_CHECK_LIB([netcdf],[nc_open],[
	LIBS="-lnetcdf ${LIBS}"
	AC_MSG_NOTICE([Good news: Simple program compiles and links to libnetcdf.a with default compiler flags]) ],[
# Linking failed, so add 64-bit compiler flags and try again
	AC_MSG_NOTICE([Bad news: Simple program does not compile and link to libnetcdf.a with default compiler flags. Will try with 64-bit ABI flags...])
	case ${host} in
# fxm csz: Test for existance of user-defined vars before overwriting
	    mips*-sgi-irix* ) 
		case ${CC} in
		    cc ) CFLAGS="${CFLAGS} -64 -mips4" ; LDFLAGS="${LDFLAGS} -64" ; ;;
		    gcc ) CFLAGS="${CFLAGS} -mabi=64" ; LDFLAGS="${LDFLAGS} -mips4 -L/usr/local/lib/mabi=64" ; ;;
		esac
		;;
	    powerpc-ibm-aix* ) 
		case ${CC} in 
# Pass -X 64 to symbol extractor or libtool fails
		    gcc ) CFLAGS="${CFLAGS} -maix64" ; ;;
		    xlc* ) CFLAGS="${CFLAGS} -q64" ; LDFLAGS="${LDFLAGS} -q64" ; AR="ar -X 64" ; NM="nm -B -X 64" ; ;;
		esac
		;;
	    sparc-sun-solaris2 ) 
		case ${CC} in
		    cc ) CFLAGS="${CFLAGS} -xarch=v9" ; LDFLAGS="${LDFLAGS} -xarch=v9" ; ;;
		esac
		;;
	    x86_64-unknown-linux-gnu )
		case ${CC} in
		    gcc ) CFLAGS="${CFLAGS} -m64" ; LDFLAGS="${LDFLAGS} -m64" ; ;;
# fxm: Add pgcc switches
#		    pgcc ) CFLAGS="${CFLAGS} -64 -mips4" ; LDFLAGS="${LDFLAGS} -64" ; ;;
		esac
		;;
	esac	     
	
	AC_CHECK_LIB([netcdf],[nc_close],AC_MSG_NOTICE([Adding 64-bit ABI compiler flags]),[
		echo "ERROR: Unable to compile and link executable with \"libnetcdf.a\" with LDFLAGS=${LDFLAGS}"
		echo "1. If netCDF is not installed, then download and install it:"
		echo "http://www.unidata.ucar.edu/packages/netcdf"
		echo "2. If netCDF is installed correctly, set NETCDF_LIB to directory with libnetcdf.a"
		echo "3. If configure fails here with NETCDF_LIB set correctly, try changing CC and/or CFLAGS until compilation and linking to libnetcdf.a works"
		echo "Currently CC=\"${CC}\" and CFLAGS=\"${CFLAGS}\" do not work with libnetcdf.a"
		echo "Set environment variables CC and CFLAGS to working values and then re-run ./configure"
		AC_MSG_ERROR([Mandatory netCDF link test failed]) ] ) ]
)
# End Mandatory Link Test with libnetcdf.a

# Begin Library checks
# Check for libraries, add to link path if found
#AC_CHECK_LIB([C],[cosf])
AC_CHECK_LIB([m],[sin])
AC_CHECK_LIB([sunmath],[sinf])
NCO_CHECK_FUNCS([getopt getopt_long])
AC_CHECK_FUNC(getopt_long,,[nco_need_getopt_long='yes'])
AM_CONDITIONAL(NCO_NEED_GETOPT_LONG,test "${nco_need_getopt_long}" = 'yes')
# NCO_CHECK_FUNC also defines NEED_xxxx when xxxx function is not found
NCO_CHECK_FUNCS([acosf asinf atanf cosf expf fabsf fmodf log10f logf powf sinf sqrtf tanf])
NCO_CHECK_FUNCS([erff erfcf gammaf])
NCO_CHECK_FUNCS([acoshf asinhf atanhf coshf sinhf tanhf])
NCO_CHECK_FUNCS([ceilf floorf])
NCO_CHECK_FUNCS([nearbyintf rintf roundf truncf])
NCO_CHECK_FUNCS([getopt_long])
NCO_CHECK_FUNCS([strdup strcasecmp])
AC_CHECK_LIB([intl],[gettext])
AC_CHECK_LIB([resolv],[res_init])
AC_CHECK_LIB([socket],[main])
AC_CHECK_LIB([thread],[main])
#AC_CHECK_LIB([nsl],[main])
AC_CHECK_LIB([nco],[nco_open])
# End Library checks

# Begin DODS support
AC_ARG_VAR([DODS_ROOT],[Root of DODS installation] (compile-time))
AC_ARG_ENABLE(dods,AS_HELP_STRING([--enable-dods],[Build DODS/OpenDAP clients if possible [[default=yes]]]),enable_dods=${enableval},enable_dods=yes)
# Check for DODS libraries unless told not to
if test "${enable_dods}" != 'no'; then
  # Add ${DODS_ROOT} to search path if present
    if test "${DODS_ROOT}"; then
	LDFLAGS="${LDFLAGS} -L${DODS_ROOT}/lib"
    fi 
# Following tests are mutually exclusive
# DODS version 3.2.x tests:
#  AC_CHECK_LIB([z],[inflate],,enable_dods=no)
#  AC_CHECK_LIB([www],[HTLibInit],,enable_dods=no)
#  AC_CHECK_LIB([rx],[main],,enable_dods=no)
# DODS version 3.4.x tests:
# These must all be present for DODS to work
    AC_MSG_NOTICE([NB: Following six libraries required for DODS/OPeNDAP clients:])
    AC_CHECK_LIB([z],[inflate],,enable_dods=no)
    AC_CHECK_LIB([dl],[dlopen],,enable_dods=no)
    AC_CHECK_LIB([pthread],[pthread_once],,enable_dods=no)
    AC_CHECK_LIB([curl],[curl_easy_init],,enable_dods=no)
    AC_CHECK_LIB([xml2],[xmlParseDocument],,enable_dods=no)
# If all libraries were present, enable_dods=yes
# If not, restore LIBS to previous value
    nco_old_LIBS="${LIBS}"
# Assume stdc++ is available, (fxm: how to look for it automatically?)
# NB: -lstdc++ automatically linked by g++, add by hand for other compilers
    LIBS="-lstdc++ ${LIBS}"
# Duplicate library links required to resolve dependencies when -lnc-dods is used
    LIBS="-ldap++ -lnc-dods -ldap++ ${LIBS}"
    AC_CHECK_LIB([nc-dods],[nc_open],,enable_dods=no)
    if test "${enable_dods}" = 'no'; then
	AC_MSG_WARN([DODS support disabled (missing libraries)])
	LIBS="${nco_old_LIBS}"
    elif test "${enable_dods}" = 'yes'; then
	AC_DEFINE(ENABLE_DODS,1,Compile operators with DODS/OpenDAP support)
	AC_MSG_NOTICE([DODS support enabled])
# libtool cleans up duplicate library links (e.g., dap++, nc-dods) unless told not to
	LIBTOOL="${LIBTOOL} --preserve-dup-deps"
    fi
fi
AM_CONDITIONAL(TEST_DODS,[test "${enable_dods}" = 'yes'])
# End DODS support

# Begin Fortran
# If --enable-fortran define USE_FORTRAN_ARITHMETIC
AC_ARG_ENABLE(fortran,AS_HELP_STRING([--enable-fortran],[Use Fortran arithmetic (deprecated) [[default=no]]]),enable_fortran=${enableval},enable_fortran=no)
if test "${enable_fortran}" = 'yes'; then
    AC_DEFINE(USE_FORTRAN_ARITHMETIC,1,Use Fortran arithmetic)
fi
# End Fortran

# Begin HDF5
# HDF5 support (experimental, for future use)
AC_ARG_VAR([HDF5_ROOT],Location of HDF5 libraries (compile-time))
AC_ARG_ENABLE(hdf5,AS_HELP_STRING([--enable-hdf5],[Use HDF5 support (WARNING: Experimental, for future use) [[default=no]]]),enable_hdf5=${enableval},enable_hdf5=no)

# Check for HDF5 libraries unless told otherwise
if test "${enable_hdf5}" != 'no'; then
  # Add ${HDF5_ROOT} to search path if present
    if test "${HDF5_ROOT}"; then
	LDFLAGS="${LDFLAGS} -L${HDF5_ROOT}"
    fi 
  # These must all be present for HDF5 to work. If all present, enable_hdf5=yes
    AC_CHECK_LIB([mfhdf],[main],nco_have_mfhdf=yes,enable_hdf5=no)
#  AC_CHECK_LIB([df],[main],,enable_hdf5=no)
#  AC_CHECK_LIB([jpeg],[main],,enable_hdf5=no)
#  AC_CHECK_LIB([z],[main],,enable_hdf5=no)
    AC_CHECK_LIB([hdf5],[H5Fcreate],nco_have_hdf5=yes,enable_hdf5=no)
#  AC_CHECK_LIB([f],[main],,enable_hdf5=no)
#  AC_CHECK_LIB([ftn],[main],,enable_hdf5=no)
    
    if test "${enable_hdf5}" = 'no'; then
	AC_MSG_WARN([HDF5 support disabled (missing libraries)])
    elif test "${enable_hdf5}" = 'yes'; then
	AC_DEFINE(HDF5,1,Have HDF5 support)
	AC_MSG_NOTICE([HDF5 support enabled (WARNING: Experimental, for future use)])
	LIBS="-lmfhdf -lhdf5 ${LIBS}"
# Add AC_DEFINE()'s here if you want individual HAVE_LIBxxx in config.h
# They were not included by default
    fi
fi
# End HDF5

# Begin i18n
# i18n support (experimental, for future use)
AC_ARG_VAR(I18N_SHARE,Root of internationalization (i18n) locale directories (run-time))
# Add user-specified netCDF locations, if any, else add /usr/local/ locations if they exist
if test "${I18N_SHARE}"; then
    if test -d "${I18N_SHARE}"; then
	echo "I18N_SHARE directory exists"
    else
	echo "WARNING: I18N_SHARE location \"${I18N_SHARE}\" does not exist!"
    fi
else
    if test -d "/usr/share/locale"; then
	I18N_SHARE="/usr/share/locale"
    fi
fi
AC_ARG_ENABLE(i18n,AS_HELP_STRING([--enable-i18n],[Internationalization (i18n) support (WARNING: Experimental, for future use) [[default=no]]]),enable_i18n=${enableval},enable_i18n=no)

# Check for i18n libraries unless told otherwise
if test "${enable_i18n}" != 'no'; then
# These must all be present for i18n to work. If all present, enable_i18n=yes
    AC_CHECK_LIB([intl],[main],nco_have_libintl=yes,)
    if test "${enable_i18n}" = 'no'; then
	AC_MSG_WARN([i18n support disabled (missing libraries)])
    elif test "${enable_i18n}" = 'yes'; then
	AC_DEFINE(I18N,1,i18n support requested)
	AC_MSG_NOTICE([i18n support enabled (WARNING: Experimental, for future use)])
	LIBS="-lmfhdf -li18n ${LIBS}"
    fi
fi
# End i18n

# Begin largefile
# If --enable-largefile define ENABLE_LARGEFILE
if test "${enable_largefile}" = 'yes'; then
    AC_DEFINE(ENABLE_LARGEFILE,1,Enable Large File Support (LFS))
fi
# End largefile

# Begin nco_c++
# If --enable-nco_cplusplus, compile NCO C++ interface library
AC_ARG_ENABLE(nco_cplusplus,AS_HELP_STRING([--enable-nco_cplusplus],[Build NCO C++ interface library [[default=yes]]]),enable_nco_cxx=${enableval},enable_nco_cxx=yes)
# End nco_c++

# Begin rx
# Check to enable regular expression stuff, allow user to override
AC_ARG_ENABLE(regex,AS_HELP_STRING([--enable-regex],[Allow extended regular expressions [[default=yes]]]),nco_have_regex=${enableval},nco_have_regex=yes)
if test "x${nco_have_regex}" = xyes; then
    AC_CHECK_HEADER([regex.h],AC_DEFINE([HAVE_REGEX_H],1,[Define to 1 if <regex.h> is present]),nco_have_regex=no)
    AC_CHECK_HEADER([sys/types.h],AC_DEFINE([HAVE_SYS_TYPES_H]),nco_have_regex=no)
    AC_CHECK_FUNC([regexec],AC_DEFINE([HAVE_REGEXEC],1,[Define to 1 if 'regexec()' is present]),nco_have_regex=no)
    AC_CHECK_FUNC([regcomp],AC_DEFINE([HAVE_REGCOMP],1,[Define to 1 if 'regcomp()' is present]),nco_have_regex=no)  
    AC_CHECK_FUNC([regfree],AC_DEFINE([HAVE_REGFREE],1,[Define to 1 if 'regfree()' is present]),nco_have_regex=no)
fi  
if test "x${nco_have_regex}" = xyes; then
    AC_DEFINE(NCO_HAVE_REGEX_FUNCTIONALITY,1,POSIX extended regular expressions available)
fi
# End rx

# Begin Shared
# If --enable-shared define ENABLE_SHARED
if test "${enable_shared}" = 'yes'; then
    AC_DEFINE(ENABLE_SHARED,1,Enable shared libraries)
fi
# End Shared

# Begin Static
# If --enable-static define ENABLE_STATIC
if test "${enable_static}" = 'yes'; then
    AC_DEFINE(ENABLE_STATIC,1,Enable static libraries)
fi
# End Static

# Begin UDUnits
# Check for Unidata's UDUnits library and data files
if test "x${NETCDF_INC}" = "x"; then
    nco_udunits_dat="/usr/local/etc/udunits.dat"
else
    nco_udunits_dat="${NETCDF_INC}/../etc/udunits.dat"
fi
# MacOS X requires libudport for threaded functions
AC_CHECK_FUNC(tdelete,,AC_CHECK_LIB([udport],[tdelete]))
AC_ARG_ENABLE(udunits,AS_HELP_STRING([--enable-udunits],[Build-in UDUnits support if possible [[default=yes]]]),enable_udunits=${enableval},enable_udunits=yes)
# Check for UDUnits libraries unless told not to
if test "${enable_udunits}" != 'no'; then
    AC_MSG_NOTICE([NB: Following tests of UDUnits library and header must succeed for UDUnits support:])
    AC_CHECK_LIB([udunits],[utInit],,enable_udunits=no)
    AC_CHECK_HEADER([udunits.h],AC_DEFINE([HAVE_UDUNITS_H],1,[Define to 1 if <udunits.h> is present]),enable_udunits=no)
    if test "${enable_udunits}" = 'no'; then
	AC_MSG_WARN([UDUnits support disabled (missing/unusable library or header file)])
    elif test "${enable_udunits}" = 'yes'; then
	LIBS="${LIBS} -ludunits"
	AC_DEFINE(ENABLE_UDUNITS,1,Compile operators with UDUnits support)
	AC_MSG_NOTICE([UDUnits support enabled])
    fi
# When empty, utInit() uses environment variable UDUNITS_PATH, if any (see nco_lmt.c)
# Thus UDUNITS_DAT need not be known at compile time
    AC_ARG_VAR([UDUNITS_PATH],Location of UDUnits database 'udunits.dat' (run-time))
# Use DEFINE_UNQUOTED for quoted string so quotes get correctly merged into source file 
    AC_CHECK_FILE([$nco_udunits_dat],[AC_DEFINE_UNQUOTED([UDUNITS_DAT],["$nco_udunits_dat"],[Location of UDUnits data file])])
fi
# This would activate conditional UDUnits tests, if there were any
#AM_CONDITIONAL(TEST_UDUNITS,[test "${enable_udunits}" = 'yes'])
# End UDUnits

# Begin Default OS-specific Compiler Arguments
# Perform standard additions to compilers and preprocessor flags before testing anything
# NB: These flags take effect regardless of enable-[debug/optimize]-custom setting
case ${host} in
    powerpc-ibm-aix* ) 
	case ${CC} in 
	    gcc ) CFLAGS="${CFLAGS} -maix64" ; ;;
# -qmaxmem=num Limit memory used by space intensive optimizations to <num> kilobytes
# -qspill=size Size in B of register allocation spill area, mie needs > 1040 B
# -qlanglvl=extc99: Include orthogonal extensions to C99 standard
	    xlc* ) CFLAGS="${CFLAGS} -qlanglvl=extc99 -qmaxmem=8192 -qspill=2048" ; ;;
#    CPPFLAGS="${CPPFLAGS} -qlanglvl=extended" 
	esac
	case ${CXX} in 
# -bh:5 suppresses annoying messages from xlC linker WARNING: Duplicate symbol: ...
	    xlC* ) LDFLAGS="${LDFLAGS} -bh:5" ; ;;
	esac
esac
# End Default OS-specific Compiler Arguments

# Begin custom GCC switches
# Perform elaborate "or" test since autoconf does not like [ -o ] syntax
GCC_OR_GXX='no'
if test "x${GCC}" = 'xyes'; then
    GCC_OR_GXX='yes'
fi
if test "x${GXX}" = 'xyes'; then
    GCC_OR_GXX='yes'
fi
if test "x${GCC_OR_GXX}" = 'xyes' ; then
# Explain and set common custom GCC flags once, here, and modify later to suit
# since GCC has same base optimization and debugging flags on all architectures

# Compilation flags for numerical routines recommended by GSL 1.3 manual, p. 397
# CFLAGS += -Werror -Wall -W -Wmissing-prototypes -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -fno-common -g -O4
    GCC_CMD_ARGS='-std=c99 -pedantic -D_BSD_SOURCE -D_POSIX_SOURCE'
    GCC_CFLAGS='-Werror -Wall -Wunused -W -Wmissing-prototypes -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -fno-common -g -O4'
    GCC_CXXFLAGS="${GCC_CFLAGS}"
# Compilation flags recommended by GSL that I like and use:
# -D_BSD_SOURCE: Support 4.3 BSD Unix extensions to ANSI C (prevents nameser.h warnings)
# -D_POSIX_SOURCE: Support POSIX.1 standard additions to ANSI C (prevents fileno warnings)
# -pedantic: Disallow non-ISO constructs (including type long long) (sometimes useful)
# -Werror: Consider warnings as errors
# -W: Extra warnings, including missing return values, comparison of signed with unsigned
# -Wall: Warn about common programming problems
# -Wmissing-prototypes: Warn if missing prototypes
# -Wshadow: Warn if local variable has same name as other local variable
# -Wpointer-arith: Warn if pointer arithmetic on types without size, e.g., void
# -Wcast-qual: Warn if const qualifier removed from pointer
# -Wcast-align: Warn if casting pointer to type of different size
# -Wwrite-strings: Apply const-qualifier to string constants, die if overwritten
# -fno-common: Prevent global variables from being simultaneously defined in different files
# -g: Put debugging symbols in executable
# -O4: Turn on optimization so unitialized variables are flagged
# Compilation flags recommended by GSL that I do not like and do not use:
# -ansi: Support only strict ANSI C. Equivalent to -std=c89, conflicts with -std=c99
# --no-alias? -fstrict-aliasing
# -Waggregate-return: Warn if functions return aggregates like structures or unions
# -Wconversion: Warn if converting signed to unsigned. Intended for obsolete, non-prototyped code. Triggers fabsf(), sqrtf(), warnings.
# -Wnested-externs: Warn if extern is encountered within function. C only?
# -Wstrict-prototypes: Warn if inconsistent prototypes. C only?
# -Wtraditional: Warn if constructs differ between traditional and ANSI C. C only?
# -Dinline=: inline is not an ANSI keyword, must undefine inline to work with -ansi
# -fshort-enums: Make enums as short as possible, ususally non-int. Do not ever invoke this! This breaks ABI and causes subtle problems
fi
# End custom GCC switches

# Begin enable_debug_custom
# Custom debug: Activate all known, helpful compile-time and run-time debugging checks
AC_ARG_ENABLE(debug-custom,AS_HELP_STRING([--enable-debug-custom],[Activate all known, helpful compile-time and run-time debugging checks such as pedantic warnings, bounds checking (slowest execution). Automatically activates --enable-debug-symbols. [[default=no]]]),enable_debug_custom=${enableval},enable_debug_custom=no)
if test "${enable_debug_custom}" = 'yes'; then
    AC_DEFINE(ENABLE_DEBUG_CUSTOM,1,[Custom debugging: Pedantic, bounds checking (slowest execution)])
    if test "x${GCC}" = 'xyes' ; then 
	CC="${CC} ${GCC_CMD_ARGS}"
# fxm: What to do with default -g -O2 flags? Be redundant for now...
	CFLAGS="${CFLAGS} ${GCC_CFLAGS}"
	if test "x${GXX}" = 'xyes' ; then 
	    CXXFLAGS="${GCC_CXXFLAGS}"
	fi
    fi
# Other switches are compiler-specific
    case ${host} in
	alpha*-dec-osf* ) 
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -check_bounds -check -check_omp" ; ;;
	    esac
	    ;;
	*-cray-unicos* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -h rounddiv -h indef -h bounds -h nofastmd -h nofastmodulus" ; ;;
	    esac
	    ;;
	mips*-sgi-irix* ) 
	    if test "x${CC}" = xcc; then 
		CFLAGS="${CFLAGS} -trapuv"
	    fi
	    ;;
	powerpc-apple-darwin* ) 
	    ;;
	powerpc-ibm-aix* ) 
	    case ${CC} in 
		xlc* ) CFLAGS="${CFLAGS} -qflttrap -qidirfirst -qlonglong -qwarn64 -qcheck=all -qhalt=s"
		    case ${CXX} in 
			xlC* ) CXXFLAGS="${CFLAGS}"
		    esac
		    ;;
	    esac
	    ;;
	rs6000-ibm-aix* ) 
	    ;;
	sparc-sun-solaris2 )
	    ;;
	sx*-nec-superux* ) 
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -h0 -hstack=nan" ; ;;
	    esac
	    ;;
    esac
    
# Check for debugging libraries
    AC_CHECK_LIB([ccmalloc],[main],,AC_MSG_WARN([Unable to find ccmalloc library]) )
    AC_CHECK_LIB([dl],[main],,AC_MSG_WARN([Unable to find dl library]) )  
    
fi
# End enable_debug_custom

# Begin enable_debug_symbols
# If --enable-debug-symbols, add these compiler flags
AC_ARG_ENABLE(debug-symbols,AS_HELP_STRING([--enable-debug-symbols],[Debugging symbols: Produce symbols for debuggers (e.g., dbx, gdb) [[default=no]]]),enable_debug_symbols=${enableval},enable_debug_symbols=no)
# Custom debug automatically invokes debugging symbols
if test "${enable_debug_custom}" = 'yes'; then
    enable_debug_symbols='yes';
fi
if test "${enable_debug_symbols}" = 'yes'; then
    AC_DEFINE(ENABLE_DEBUG_SYMBOLS,1,Debugging symbols: Produce symbols for debuggers (e.g., dbx, gdb))
# All known architectures use -g to turn on debugging symbols    
    CFLAGS="${CFLAGS} -g"
fi
# End enable_debug_symbols

# Begin enable_optimize_custom
# Activate all known, helpful switches for fastest possible run-time performance
# These switches are highly compiler and architecture dependent
# Settings should improve performance relative to default ./configure setttings
AC_ARG_ENABLE(optimize-custom,AS_HELP_STRING([--enable-optimize-custom],[Activate all known, helpful switches for fastest possible run-time performance (slowest compilation) [[default=no]]]),enable_optimize_custom=${enableval},enable_optimize_custom=no)
if test "${enable_optimize_custom}" = 'yes'; then
    AC_DEFINE(ENABLE_OPTIMIZE_CUSTOM,1,Fastest possible execution (slowest compilation))
    if test "x${GCC}" = 'xyes' ; then 
# fxm: TODO #303 go through GCC manual and add more speedy flags
# Until then, GCC has interesting property that --enable-optimize-custom flags equal --enable-optimize-debug flags!
	CC="${CC} ${GCC_CMD_ARGS}"
	CFLAGS="${CFLAGS} ${GCC_CFLAGS}"
	if test "x${GXX}" = 'xyes' ; then 
	    CXXFLAGS="${GCC_CXXFLAGS}"
	fi
    fi
    case ${host} in
	alpha*-dec-osf* ) 
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -O2 -ansi-alias" ; ;;
	    esac
	    ;;
	*-cray-unicos* )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -h rounddiv -h nofastmd -h nofastmodulus" ; ;;
	    esac
	    ;;
	mips*-sgi-irix* ) 
	    if test "x${CC}" = xcc; then 
		CFLAGS="${CFLAGS} -O2" 
	    fi
	    ;;
	powerpc-ibm-aix* ) 
	    case ${CC} in 
# -qstrict: Ensure that -O3 optimizations do not alter program semantics
# -Q : Inline all appropriate subprograms
		xlc* ) CFLAGS="${CFLAGS} -O3 -qstrict -Q"
		    case ${CXX} in 
			xlC* ) CXXFLAGS="${CFLAGS}"
		    esac
		    ;;
	    esac
	    ;;
	rs6000-ibm-aix* ) 
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -O" ; ;;
	    esac
	    ;;
	sparc-sun-solaris2 )
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -O2" ; ;;
	    esac
	    ;;
	sx*-nec-superux* ) 
	    case ${CC} in
		cc ) CFLAGS="${CFLAGS} -h2 -hmath vector -hxint" ; ;;
	    esac
	    ;;
    esac
fi
# End enable_optimize_custom

# Begin pvmgetarch Compatibility
# Compatibility map between pvmgetarch and GNU triplets
# Maintained as master list of architectures on which NCO is known to work
case ${host} in
    alpha*-dec-osf* ) AC_DEFINE(LINUXALPHA,1,Compatibility pvmgetarch token for OSF on DEC Alpha)
	;;
    alpha*-*-linux* ) AC_DEFINE(LINUXALPHA,1,Compatibility pvmgetarch token for Linux on DEC Alpha)
	;;   
    hppa*-hp-hpux* ) AC_DEFINE(HPUX,1,Compatibility pvmgetarch token for HPUX on PA RISC)
	;;
    i*86-pc-freebsd* ) AC_DEFINE(FREEBSD,1,Compatibility pvmgetarch token for FreeBSD on Intel x86)
	;;   
    i*86-pc-linux* ) AC_DEFINE(LINUX,1,Compatibility pvmgetarch token for Linux on Intel x86)
	;;
    i*86-pc-cygwin* ) AC_DEFINE(WIN32,1,Compatibility pvmgetarch token for Windows on Intel x86)
	;;
    mips*-sgi-irix* ) AC_DEFINE(SGIMP64,1,Compatibility pvmgetarch token for IRIX on SGI MIPS)
	;;
    powerpc-apple-darwin* ) AC_DEFINE(MACOSX,1,Compatibility pvmgetarch token for Apple Mac OSX)
	;;
    powerpc-ibm-aix* ) AC_DEFINE(AIX,1,Compatibility pvmgetarch token for AIX on IBM PowerPC) 
	;;
    powerpc-*-linux* ) AC_DEFINE(LINUXPPC,1,Compatibility pvmgetarch token for Linux on PowerPC)
	;;
    rs6000-ibm-aix* ) AC_DEFINE(LINUXPPC,1,Compatibility pvmgetarch token for AIX on IBM RS6000)
	;;
    sparc64-*-linux* ) AC_DEFINE(LINUXSPARC64,1,Compatibility pvmgetarch token for Linux on Sun Sparc)
	;;
    sparc-sun-solaris2 ) AC_DEFINE(SUNMP,1,Compatibility pvmgetarch token for Solaris 2.x on Sun Sparc)
	;;  
    sx*-nec-superux* ) AC_DEFINE(NECSX,1,Compatibility pvmgetarch token for SuperUX on NEC SX)
	;;   
    x86_64-pc-linux* ) AC_DEFINE(LINUXAMD64,1,Compatibility pvmgetarch token for Linux on AMD x86_64)
	;;
esac
# End pvmgetarch Compatibility

# Begin netCDF test data
AC_PATH_PROG(path_to_ncgen,ncgen,,)
if test "${path_to_ncgen}"; then
    AC_MSG_NOTICE(Creating sample netCDF data files for self-tests)
    ${path_to_ncgen} -b -o data/in.nc data/in.cdl
    for fl in 85.nc 86.nc 87.nc 88.nc 89.nc h0001.nc h0002.nc h0003.nc; do
	if (test -e data/${fl}); then
	    printf ""
	else
	    ${LN_S} in.nc data/${fl};
	fi
    done
    if (test -e src/nco_c++/in.nc); then
	printf ""
    else
	${LN_S} ../../data/in.nc src/nco_c++/in.nc
    fi
else
    echo "ERROR: Unable to find 'ncgen'"
    echo "netCDF data files for testing were not created"
    echo "Do this manually in data/ subdirectory before running \"make check\""
fi
# End netCDF test data

# Tell gcc to use C99 standard (older gcc versions default to C89)
AX_CFLAGS_GCC_OPTION(-std=c99)

# Begin config
AC_CONFIG_FILES([Makefile data/Makefile src/Makefile src/nco/Makefile man/Makefile doc/Makefile])
if test "${ac_cv_cxx_have_valarray}" = 'yes' \
    && test "${enable_nco_cxx}" = 'yes' ; then
    AC_CONFIG_FILES(src/nco_c++/Makefile)
    NCO_CXX="nco_c++"
else
    NCO_CXX=
fi
AC_SUBST(NCO_CXX)
AC_OUTPUT
# End config

# Echo build parameters for debugging
echo "Configuration Parameters:"
echo "AR_FLAGS  = ${AR_FLAGS}"
echo "CC 	= ${CC}"
echo "CFLAGS	= ${CFLAGS}"
echo "CPP	= ${CPP}"
echo "CPPFLAGS  = ${CPPFLAGS}"
echo "CXX	= ${CXX}"
echo "CXXFLAGS  = ${CXXFLAGS}"
echo "HOST	= ${HOST}"
echo "LDFLAGS   = ${LDFLAGS}"
