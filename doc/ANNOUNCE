$Header$ -*-text-*-

The netCDF Operators NCO version 4.6.9 are released. 

http://nco.sf.net (Homepage, Mailing lists)
http://github.com/nco (Source Code, Releases, Developers)

What's new?
Version 4.6.9 fixes a few issues has no new major features.
Most improvements relate to CDF5 handling and CMake builds.
Also, ncks now prints CDL by default.

I shelved my plans to skip 4.6.9 because we discovered a
consequential bug with the netCDF CDF5 implementation.
This led to a flurry of mini-features to diagnose and warn
users who might inadvertently stumble on corrupt CDF5 data.
Understanding the ramifications of this CDF5 bug is ongoing.
The best case scenario now, after a month of investigation,
is that Unidata will soon declare the bug solved and put the 
appropriate patches in netCDF 4.5.0. We may make final
adjustments to diagnose/handle CDF5 issues based on those
patches, and release NCO 4.7.0 soon thereafter.

Work on NCO 4.7.0 has commenced. Planned changes include
better diagnosis and workarounds for the netCDF CDF5 bug,
and more ncclimo and ncremap features, and CMake polishing. 

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. CDF5: NCO warns when CDF5 files may be corrupted by the newly
   discovered (!) netCDF CDF5 bug: http://nco.sf.net#bug_cdf5

B. CDF5: All NCO operators now fully support CDF5.
   Previously some operators would not output it.
   Now, all output CDF5 with the -5 switch:
   ncra -5 in*.nc out.nc
   This includes auto-conversion.
   ncks converts among netCDF's five-different binary formats:
   ncks [-3 -4 -5 -6 -7] in.nc out.nc
   http://nco.sf.net/nco.html#autoconversion

C. CDF5: In support of detecting the CDF5 bug, and also for more
   general use, are new ncks features to print, in CDL comments,
   the uncompressed RAM size of every variable (when dbg_lvl >= 1).
   When dbg_lvl >= 2, the RAM size of all the data in a file,
   and the variable ID of each variable, are also printed.
   ncks -D 1 -v one ~/nco/data/in.nc
   ncks -D 2 -v one ~/nco/data/in.nc
   ncks -M -D 2 -v one ~/nco/data/in.nc
   http://nco.sf.net#cdl

D. Pedro Vicente has generously contributed a CMake build-engine. 
   CMake can build NCO on any architecture, including MS Windows,
   and makes available nearly all important features, including ncap2, 
   GSL, DAP, and UDUnits2. A few esoteric NCO features (intrinsic math
   functions like erf(),erff(),gamm()...) remain to be implemented. 
   Please give us feedback on any wrinkles in the CMake build. 
   To build with CMake and install in /usr/local: 
   cd nco/cmake
   cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local
   make
   sudo make install
   Additional examples in cmake/build.bat
   http://nco.sf.net#bld

E. ncks now prints CDL by default.
   Advance notice of this change was first given in May.
   Use the --trd switch to print with "traditional" syntax:
   ncks in.nc
   ncks --trd in.nc
   http://nco.sf.net/nco.html#trd
   http://nco.sf.net/nco.html#cdl

F. ncclimo and ncremap have changes "under-the-hood".
   E3SM/ACME users may notice cosmetic differences.
   Hard-coded paths on DOE machines can now be avoided by
   export NCO_PATH_OVERRIDE='No'
   in the shell where ncclimo/ncremap are invoked.
   http://nco.sf.net/nco.html#ncclimo

BUG FIXES:

A. ncclimo false-positive messages about 'ANN' eliminated

B. ncclimo/ncremap updated udunits2 module for edison

Full release statement at http://nco.sf.net/ANNOUNCE

KNOWN PROBLEMS DUE TO NCO:

   This section of ANNOUNCE reports and reminds users of the
   existence and severity of known, not yet fixed, problems. 
   These problems occur with NCO 4.6.9 built/tested under
   MacOS 10.12.6 with netCDF 4.4.1.1 on HDF5 1.10.1 and with
   Linux with netCDF 4.5.1-development (20170811) on HDF5 1.8.19.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but file is unreadable
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library
   20160512: Ditto
   20161028: Verified problem still exists with netCDF 4.4.1
   20170323: Verified problem still exists with netCDF 4.4.2-development
   20170323: https://github.com/Unidata/netcdf-c/issues/381

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/fxm
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (netCDF4 library bug)
   Renaming a non-coordinate variable to a coordinate variable fails in netCDF4

   Demonstration:
   ncrename -O -v non_coord,coord ~/nco/data/in_grp.nc ~/foo.nc # Fails (HDF error)

   20170323: Confirmed problem reported by Paolo Oliveri, reported to Unidata
   20170323: https://github.com/Unidata/netcdf-c/issues/381

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/fxm
   More details: http://nco.sf.net/nco.html#ncrename_crd

D. FIXED in netCDF Development branch as of 20161116 and in maintenance release 4.4.1.1
   nc-config/nf-config produce erroneous switches that cause NCO builds to fail
   This problem affects netCDF 4.4.1 on all operating systems.
   Some pre-compiled netCDF packages may have patched the problem.
   Hence it does not affect my MacPorts install of netCDF 4.4.1.

   Demonstration:
   % nc-config --cflags # Produces extraneous text that confuses make
   Using nf-config: /usr/local/bin/nf-config
   -I/usr/local/include -I/usr/local/include -I/usr/include/hdf

   If your nc-config output contains the "Using ..." line, you are
   affected by this issue. 

   20161029: Reported problem to Unidata
   20161101: Unidata confirmed reproducibility, attributed to netCDF 4.4.1 changes
   20161116: Unidata patch is in tree for netCDF 4.4.2 release
   20161123: Fixed in maintenance release netCDF 4.4.1.1

E. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

F. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

