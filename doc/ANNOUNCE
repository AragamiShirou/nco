$Header$ -*-text-*-

The netCDF Operators NCO version 4.6.0-beta03 are ready. 

http://nco.sf.net (Homepage, Mailing lists)
http://github.com/nco (Source Code, Releases, Developers)

What's new?
ncap2 has a singularly useful new feature: variable pointers,
as well as some optimizations to reduce its memory footprint.
(Thanks to Henry Butowky!). Appending is now consistent in
interactive- and forced-modes in all operators.
And ncremap continues to accrue useful features.
Overall, though, 4.6.0 is most notable for the debut of ncclimo.
ncclimo is a new operator that generates climatologies.

Work on NCO 4.6.1 has commenced and will better support eliciting
latitude/longitude coordinates using the CF "coordinates" convention
and regridding variables whose horizontal dimensions are not the
most-rapidly-varying.

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. ncclimo produces climatological monthly means, seasonal means, 
   annual mean, and optionally regrids all these files. Like ncremap,
   ncclimo is actually a front-end script to manage the complexity
   of invoking the underlying operators (ncks for ncremap and ncra for
   ncclimo). Using ncclimo is as simple as
   ncclimo -s start_yr -e end_yr -c run_id -i drc_in -o drc_out
   ncclimo -s 5 -e 10 -c hist -m ocn -i drc_in -o drc_out # MPAS-O
   ncclimo produces climatologies starting from monthly-mean files of 
   most CESM-like model and observational data formats.
   It has sophisticated parallelism and regridding options.
   Models tested include ALM, CAM, CLM, CICE, CISM, CLM, MPAS-I,
   MPAS-O, and POP. ncclimo resulted from work with the DOE ACME
   project, and I am grateful for their support.
   http://nco.sf.net/nco.html#ncclimo

A. ncap2 now works with pointers to variables and attributes.
   This allows, e.g., loops over arbitrary sets of variables, and
   make creating aggregations of variables much simpler.
   For example, to fxm

A. ncap2 has reduced memory usage. Scalars are no longer stretched
   to conform to arrays prior to arithmetic.

A. ncap2 now propagates metadata when Left-Hand-Casting variables.
   Previous versions did not propagate metadata to LHC variables.
   This fix makes converting the _type_ of a variable easier.
   For example, to change one_dmn_rec_var to NC_SHORT, use
   ncap2 -s 'one_dmn_rec_var[time]=short(one_dmn_rec_var)' in.nc out.nc
   The output file will contain the original metadata.
   http://nco.sf.net/nco.html#ncap2

A. ncatted new mode "nappend" appends only to existing attributes.
   If the attribute does not yet exist, it is not created.
   Same as "append" mode, except "append" will create attributes.
   http://nco.sf.net/nco.html#ncatted

A. ncremap now defaults to $TMPDIR for storing intermediate files.
   This is user-configurable with the -U switch.
   http://nco.sf.net/nco.html#ncremap

A. ncks can now ingest and de-interleave ENVI images in BIL, BSQ, and
   BIP format and store them as any netCDF type. ncks is a viable (and 
   faster) replacement for that small subset of tasks normally taken
   on by the venerable GDAL toolkit (gdal_translate in particular).
   Thanks to David LeBauer of the University of Illinois/NCSA and DOE
   TERRAREF for supporting this feature.
   ncks --trr_wxy=926,1600,1 --trr typ_in=NC_USHORT --trr ntl_in=bil \
   --trr_in=in.nc foo.nc out.nc
   http://nco.sf.net/nco.html#terraref

A. NCO now treats as associated coordinates all variables listed in
   "grid_mapping" attributes. Now variables such as
   "char albers_conical_equal_area" are automatically extracted along
   with variables that refer to the mappings. ncecat will not wrap
   these mappings in a record dimension.

BUG FIXES:

A. Correct ncatted documentation for "append" mode.

A. Fix Append mode to follow same code path and defaults when
   requested with -A and with interactive responses to the
   exit/append/overwrite question. Thanks to Parker Norton for
   pointing out this inconsistency. 

KNOWN PROBLEMS DUE TO NCO:

   This section of ANNOUNCE reports and reminds users of the
   existence and severity of known, not yet fixed, problems. 
   These problems occur with NCO 4.6.0-beta03 built/tested under
   MacOS with netCDF 4.3.3.1 on HDF5 1.8.16 and with
   Linux with netCDF 4.4.1-development (20160212) on HDF5 1.8.13.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but file is unreadable
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/fxm
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

D. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

