$Header: /data/zender/nco_20150216/nco/doc/ANNOUNCE,v 1.229 2007-05-22 19:46:26 zender Exp $ -*-text-*-

The netCDF operators NCO version 3.2.0 are ready. 

http://nco.sf.net (Homepage)
http://dust.ess.uci.edu/nco (Homepage "mirror")

Release 3.2.1 contains functional (though limited) netCDF4 support,
improved attribute copying, new documentation, new ncap2 features, 
and better IRIX support.
This release _requires_ netCDF 3.6.1 or newer to build correctly.

First, a paragraph or three about netCDF4 support:
Support for netCDF4 features will be incremental.
You must build NCO with netCDF4 to see this support.
There is no reason that we know of _not_ to build with netCDF4.
The main netCDF4 features NCO currently supports are the new 
atomic data types (ubyte, ushort, uint, int64, and uint64).
(The eight-byte integer support is especially helpful).
All NCO operators support these types, e.g., ncks prints them,
ncra averages them, and ncap2 scripts with them.

netCDF4-enabled NCO handles netCDF3 files without change.
In addition, it automagically handles netCDF4 (HDF) files:
If you feed NCO netCDF4 files, it will produce netCDF4 output.
If you feed NCO netCDF3 files, it will produce netCDF3 output.
Use the handy-dandy -4 switch to convert netCDF3 to netCDF4.

That said, netCDF4 is beta software so caveat emptor:
Problems with the netCDF4 and HDF libraries are still being fixed.
NCO support for netCDF4 atomic types is relatively untested.
The binary distributions (RPMs and debs) still use netCDF3 for now.
If you want the netCDF4 support, you'll have to build NCO yourself:

Make sure your library and include paths point to the netCDF4-beta1
installation and use your preferred NCO build mechanism with either
 
configure --enable-netcdf4 

or

cd ~/nco/bld;make NETCDF4=Y allinone 

Finally, here are the other NCO improvements in 3.2.1:

A. ncks copying of variable and global metadata is configurable (-m, -M).
   Formerly there was no way to append a variable from in.nc to out.nc
   without bringing its metadata and all global metadata with it. 
   ncks -A           in.nc out.nc # Append variable and global attributes
   ncks -O           in.nc out.nc # Copy   variable and global attributes
   ncks -v one       in.nc out.nc # Copy   variable and global attributes
   ncks -O -v one    in.nc out.nc # Copy   variable and global attributes
   ncks -A -v one    in.nc out.nc # Append variable not global attributes
   ncks -A -M -v one in.nc out.nc # Append variable not global attributes
   ncks -O -M -v one in.nc out.nc # Copy   variable not global attributes
   ncks -O -m -v one in.nc out.nc # Copy   global not variable attributes
   ncks -O -M -m -v one in.nc out.nc # Copy   data only, no attributes
   ncks -A    -m -v one in.nc out.nc # Append data only, no attributes
   http://nco.sf.net/nco.html#prn has more details.

B. GCC 4.2 compatibility: This is untested. However, we're eager to
   whether the OpenMP works for those who build NCO with GCC 4.2.

C. New Documentation:
   Working with non-standard grids, e.g., 2D grids 
   http://nco.sf.net/nco.html#grd

D. ncks reports input file type (e.g., NC_FORMAT_CLASSIC,
   NC_FORMAT_NETCDF4) as part of global metadata

E. Fix ncap2 .total() method to correctly handle missing_values fxm

F. ncap2 (http://nco.sf.net/nco.html#ncap2) grows more powerful.
   Henry has ...
   Once threading and for loops are done we'll document it all. 

G. Pre-built, up-to-date, Debian Sid binary packages are available.
   Debian/Ubuntu users may get them from http://nco.sf.net#debian
   "apt-get install nco" also retrieves these versions

H. Pre-built, up-to-date, RPM packages are available, e.g.,
   http://nco.sf.net/src/nco-3.2.0-1.i386.rpm

Enjoy,
Charlie
 
