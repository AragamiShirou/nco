#!/usr/bin/env python
import sys
import cgitb
import cgi

cgitb.enable()
sys.stderr = sys.stdout

class SsdInterface:
    def __init__(self):
        self.actions = {"rebuilddb": self.rebuildDb,
                        "showdb": self.showDb,
                        "help": self.printHelp,
                        "ls" : self.listFiles}
    
    def rebuildDb(self,form):
        """resets the db, clearing entries and using the latest schema"""
        import sys
        sys.path.append("/home/wangd/ssdapSpace/nco/src/ssdap")
        import ssdap_dbutil
        try:
            ssdap_dbutil.deleteTables()
        except:
            pass # ok if error deleting tables.
        ssdap_dbutil.buildTables()
        
        return "Done rebuilding db"
    def showDb(self,form):
        """prints the db state"""
        import sys
        sys.path.append("/home/wangd/ssdapSpace/nco/src/ssdap")
        import ssdap_dbutil
        ssdap_dbutil.quickshow()
        
        return "done with output"
    def printHelp(self,form):
        """prints a brief help message showing available commands"""
        print "<pre>available commands:"
        for a in self.actions:
            print "%-20s : %s" %(a, self.actions[a].func_doc)
        print "</pre>"
        
        return "done with output"
    def listFiles(self,form):
        """does a normal ls file listing. sorta-secure"""
        if not form.has_key("path"):
            print "no path specified, specify with parameter 'path'"
            return
        path = form.getvalue("path").strip()
        if path.startswith("/") or path.startswith("../") \
           or (path.find("..") > -1):
            print "invalid path specified, try again"
            return
        import os
        ppath = os.path.join("/var/www/html",path)
        print "<pre>BEGIN listing for :",path
        #no leading /
        try:
            for a in os.listdir(ppath):
                print a
        except OSError:
            print "END Error using path ", path
        print "END listing</pre>"
        
        return "done with output"
        

    def execute(self, action, form, errorfunc):
        if action in self.actions:
            return self.actions[action](form)
        else:
            errorfunc()
            
class External:
    def printHeader(self):
        print "Content-type: text/html"
        print 
        print "<html><head><title>simple ssdap serverside</title></head>"
        print "<h1></h1>"
        print "<P>Hello, ssdap serverside debugger!</p>"
    def parseParams(self):
        self.form = cgi.FieldStorage()
    def complain(self):
        print "<h2>Error: unsupported request</h2>"
    def execute(self):
        s = SsdInterface()
        if self.form.has_key("action"):
            action = self.form.getvalue("action")
            print "<pre>"
            output = s.execute(action, self.form, self.complain)
            if output == None:
                print "Action", action, " returned nothing"
                self.complain()
            else:
                print output
            print "</pre>"
        else:
            self.complain()
    def close(self):
        print "\n</body></html>\n"


e = External()
e.printHeader()
e.parseParams()
e.execute()
e.close()

